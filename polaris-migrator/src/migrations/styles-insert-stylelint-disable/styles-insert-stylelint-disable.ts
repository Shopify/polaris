import os from 'os';

import type {API, FileInfo, Options} from 'jscodeshift';
import postcss, {Node, Comment, Plugin, Root} from 'postcss';
import stylelint, {StylelintPostcssResult} from 'stylelint';

const crossPlatformNewlineRegExp = /\r\n?|\n/;
const polarisContextMsg = '-- generated by polaris-migrator DO NOT COPY';

const plugin = (): Plugin => {
  return {
    postcssPlugin: 'insert-stylelint-disable',
    Once(root, {result}) {
      result.messages.forEach(({node}) => {
        // If a polaris ignore comment exists above the node already,
        // do nothing
        if (node.prev()?.text?.includes(polarisContextMsg)) {
          return;
        }

        const isMultiline =
          crossPlatformNewlineRegExp.test(node.value) ||
          crossPlatformNewlineRegExp.test(node.text) ||
          crossPlatformNewlineRegExp.test(node.params);

        const commentText = `${
          isMultiline ? 'stylelint-disable' : 'stylelint-disable-next-line'
        } ${polarisContextMsg}`;

        const comment = createDisableComment(commentText, node.prev());

        node.before(comment);

        if (isMultiline) {
          (node.type === 'atrule' && node?.nodes?.length) ||
          node.type === 'rule'
            ? node.prepend(createCommentNode('stylelint-enable'))
            : node.after(createCommentNode('stylelint-enable'));
        }

        deleteExtraNewlinesBeforeNode(node);
      });

      fillDescriptionlessDisables(result, root);
    },
  };
};

export default async function stylesInsertStylelintDisable(
  file: FileInfo,
  _: API,
  options: Options,
) {
  return postcss([
    stylelint({
      config: {
        extends: [options.config ?? '@shopify/stylelint-polaris'],
      },
    }) as Plugin,
    plugin(),
  ])
    .process(file.source, {
      from: file.path,
      syntax: require('postcss-scss'),
    })
    .then((result) => {
      return result.css;
    });
}

/**
 * Create a postcss comment node in the style:
 * `// ${text}`
 */
function createCommentNode(text: string): Comment {
  return new postcss.Comment({
    text,
    raws: {
      left: ' ',
      right: '',
      inline: true,
    },
  });
}

/**
 * Create a new disable comment with the given text.
 * If the prevNode and the text are both disable-next-line
 * comments, they are combined into a single comment with their
 * description texts seperated by a comma.
 */
function createDisableComment(text: string, prevNode: Comment): Comment {
  if (
    prevNode?.type !== 'comment' ||
    !prevNode.text.includes('stylelint-disable-next-line') ||
    !text.includes('stylelint-disable-next-line')
  ) {
    return createCommentNode(text);
  }

  const prevDescription = prevNode.text?.split('--')?.[1]?.trim();
  const commentText = prevDescription?.length
    ? [text, prevDescription].join(', ')
    : text;

  prevNode.remove();

  return createCommentNode(commentText);
}

/**
 * Reduces the number of newline characters in a node's before
 * raws to just one. This is helpful to ensure that there is
 * only one newline between a disable-next-line comment and
 * the warning node.
 */
function deleteExtraNewlinesBeforeNode(node: Node) {
  node.raws.before = `${os.EOL}${node.raws.before.replace(
    new RegExp(crossPlatformNewlineRegExp, 'g'),
    '',
  )}`;
}

/**
 * If report-descriptionless-disables is enabled on stylelint,
 * add a generated description to disables that don't have one.
 */
function fillDescriptionlessDisables(result: any, root: Root) {
  const stylelintResult = result?.stylelint as StylelintPostcssResult;

  if (stylelintResult?.config?.reportDescriptionlessDisables) {
    root.walkComments((comment) => {
      if (
        comment.text.includes('stylelint-disable') &&
        !comment.text.includes('--')
      ) {
        comment.before(
          createCommentNode([comment.text, polarisContextMsg].join(' ')),
        );
        comment.remove();
      }
    });
  }
}
