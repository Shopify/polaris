@import '../../styles/common';

$accent-height: 3px;
$heading-offset: rem(2px);
$ribbon-flex-basis: rem(32px);
$secondary-action-vertical-padding: 0.5 * (control-height() - line-height(body));
$secondary-action-horizontal-padding: 1.5 * spacing(tight);

@mixin banner-variants($in-page) {
  --p-banner-background: var(--p-background);
  --p-banner-border: var(--p-banner-border-default);
  transition: box-shadow duration() easing();
  transition-delay: duration(fast);
  box-shadow: var(--p-banner-border);

  @if $in-page {
    @include focus-ring('wide');
    border-radius: var(--p-border-radius-wide);
    background-color: var(--p-banner-background);
  } @else {
    @include focus-ring('base');
    border-radius: var(--p-border-radius-base);
    background-color: var(--p-banner-background);
  }

  @include high-contrast-outline;

  &:focus {
    outline: none;
  }

  &.keyFocused {
    box-shadow: var(--p-banner-border);
    @include focus-ring('wide', $style: 'focused');
  }

  &.statusSuccess {
    --p-banner-background: var(--p-surface-success-subdued);
    --p-banner-border: var(--p-banner-border-success);
  }

  &.statusInfo {
    --p-banner-background: var(--p-surface-highlight-subdued);
    --p-banner-border: var(--p-banner-border-highlight);
  }

  &.statusWarning {
    --p-banner-background: var(--p-surface-warning-subdued);
    --p-banner-border: var(--p-banner-border-warning);
  }

  &.statusCritical {
    --p-banner-background: var(--p-surface-critical-subdued);
    --p-banner-border: var(--p-banner-border-critical);
  }
}

.Banner {
  --p-rgb-text: 33, 43, 54;
  position: relative;
  display: flex;

  // stylelint-disable selector-max-class, selector-max-combinators, selector-max-specificity
  &.statusCritical .PrimaryAction .Button {
    border-color: var(--p-border-critical-subdued);
    background: var(--p-surface-critical-subdued);

    &:hover {
      border-color: var(--p-border-critical-subdued);
      background: var(--p-surface-critical-subdued-hovered);
    }

    &:active {
      border-color: var(--p-border-critical-subdued);
      background: var(--p-surface-critical-subdued-pressed);
    }

    &:focus:not(:active) {
      border-color: var(--p-border-critical-subdued);
      background: var(--p-surface-critical-subdued);
    }
  }

  &.statusWarning .PrimaryAction .Button {
    border-color: var(--p-border-warning-subdued);
    background: var(--p-surface-warning-subdued);

    &:hover {
      border-color: var(--p-border-warning-subdued);
      background: var(--p-surface-warning-subdued-hovered);
    }

    &:active {
      border-color: var(--p-border-warning-subdued);
      background: var(--p-surface-warning-subdued-pressed);
    }

    &:focus:not(:active) {
      border-color: var(--p-border-warning-subdued);
      background: var(--p-surface-warning-subdued);
    }
  }

  &.statusInfo .PrimaryAction .Button {
    border-color: var(--p-border-highlight-subdued);
    background: var(--p-surface-highlight-subdued);

    &:hover {
      border-color: var(--p-border-highlight-subdued);
      background: var(--p-surface-highlight-subdued-hovered);
    }

    &:active {
      border-color: var(--p-border-highlight-subdued);
      background: var(--p-surface-highlight-subdued-pressed);
    }

    &:focus:not(:active) {
      border-color: var(--p-border-highlight-subdued);
      background: var(--p-surface-highlight-subdued);
    }
  }

  &.statusSuccess .PrimaryAction .Button {
    border-color: var(--p-border-success-subdued);
    background: var(--p-surface-success-subdued);

    &:hover {
      border-color: var(--p-border-success-subdued);
      background: var(--p-surface-success-subdued-hovered);
    }

    &:active {
      border-color: var(--p-border-success-subdued);
      background: var(--p-surface-success-subdued-pressed);
    }

    &:focus:not(:active) {
      border-color: var(--p-border-success-subdued);
      background: var(--p-surface-success-subdued);
    }
  }
  // stylelint-enable selector-max-class, selector-max-combinators, selector-max-specificity
}

.ContentWrapper {
  flex: 1 1 auto;
}

.withinContentContainer {
  $bannerSpacing: rem(14px);
  $bannerOffset: $bannerSpacing - spacing();
  padding: spacing() spacing() $bannerSpacing;

  .ContentWrapper {
    margin-top: $bannerOffset;
  }

  .Dismiss {
    top: spacing();
    right: spacing(base-tight);
    position: absolute;
  }

  .Ribbon {
    padding-right: spacing();
  }

  @include banner-variants($in-page: false);

  + .Banner {
    margin-top: spacing(tight);
  }

  .Actions {
    padding: spacing(base-tight) 0 spacing(extra-tight) 0;
  }
}

.withinPage {
  border-radius: 0 0 border-radius() border-radius();

  $bannerSpacing: rem(18px);
  $bannerOffset: $bannerSpacing - spacing(loose);
  padding: spacing(loose) spacing(loose) $bannerSpacing;

  .ContentWrapper {
    margin-top: $bannerOffset;
  }

  @include banner-variants(true);

  + .Banner {
    margin-top: spacing(loose);
  }

  .Ribbon {
    padding-right: spacing();
  }

  .Actions {
    padding-top: spacing();
  }

  .Dismiss {
    right: spacing();
    top: spacing(loose);
    position: absolute;
  }
}

.hasDismiss {
  padding-right: calc(#{2 * spacing()} + var(--p-icon-size));
}

.Heading {
  padding-top: var(--p-override-none, $heading-offset);
  word-break: break-word;
}

.Content {
  @include text-breakword;
  padding: rem(2px) 0;
}

.Ribbon {
  flex: 0 0 $ribbon-flex-basis;
}

.PrimaryAction {
  margin-right: rem(6px);
}

// We need pretty high specificity to do the descendant selectors
// onto the text, which needs to be the relative positioned wrapper
// so that the borders/ backgrounds do not extend outside of it.
// stylelint-disable selector-max-specificity

.SecondaryAction {
  @include unstyled-button;
  @include unstyled-link;
  display: inline-block;
  text-align: left;
  margin: (-1 * $secondary-action-vertical-padding)
    (-0.5 * $secondary-action-horizontal-padding);
  padding: $secondary-action-vertical-padding
    $secondary-action-horizontal-padding;
  color: var(--p-text);
  padding-left: rem(6px);

  &:hover > .Text {
    box-shadow: 0 -2px 0 0 rgba(var(--p-rgb-text), 0.75) inset;
  }

  &:active > .Text {
    box-shadow: 0 -2px 0 0 rgba(var(--p-rgb-text), 0) inset;
  }

  &:focus > .Text {
    @include plain-button-backdrop;
    @include high-contrast-button-outline;
    box-shadow: none;
  }
}

.Text {
  box-shadow: 0 -2px 0 0 rgba(var(--p-rgb-text), 0.25) inset;
  will-change: box-shadow;
  transition: box-shadow duration() easing();
}

.Button {
  @include button-base;
  @include text-style-button;
  @include focus-ring($border-width: rem(2px));
  color: var(--p-text);

  &:focus {
    @include focus-ring($style: 'focused');
  }
}
