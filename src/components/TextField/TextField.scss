@import '../../styles/common';

$textfield-backdrop-offset: -(border-width(thick));
$backdrop-horizontal-spacing: spacing(tight) * 1.5;
$addon-horizontal-spacing: 0.25em;
$spinner-icon-size: rem(12px);
$prefix-horizontal-spacing: spacing(tight);

$stacking-order: (
  contents: 20,
  backdrop: 10,
);

.TextField {
  @include text-style-input;
  position: relative;
  display: flex;
  align-items: center;
  color: var(--p-text-on-surface, color('ink', 'lighter'));
  cursor: text;

  svg {
    fill: var(--p-icon-on-surface, color('ink', 'lighter'));
  }
}

.multiline {
  padding: 0;
  flex-wrap: wrap;

  > .Input {
    overflow: auto;
    padding-left: $backdrop-horizontal-spacing;
    padding-right: $backdrop-horizontal-spacing;
    resize: none;
  }
}

.hasValue {
  color: var(--p-text-on-surface, color('ink', 'lighter'));
}

.focus > .Input,
.Input:focus {
  outline: none;
  border: border(transparent);

  // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
  ~ .Backdrop::after {
    opacity: 1;
  }
}

.error {
  .Input::placeholder {
    // This is the only place this color is used.
    // stylelint-disable-next-line color-no-hex
    color: #9c9798;
  }

  // stylelint-disable-next-line selector-max-class, selector-max-combinators
  > .Input ~ .Backdrop {
    background-color: var(
      --p-critical-surface-subdued,
      color('red', 'lighter')
    );
    border-color: var(--p-critical-divider, color('red', 'dark'));

    // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
    &::after {
      border-color: var(--p-interactive-focus, color('red', 'dark'));
    }
  }
}

.readOnly {
  color: var(--p-text-disabled-on-surface);
}

.readOnly > .Backdrop {
  background-color: var(--p-neutral-action-disabled, color('sky', 'lighter'));
}

.disabled {
  color: var(--p-text-disabled-on-surface, color('ink', 'lightest'));
  cursor: initial;

  > .Backdrop {
    background-color: var(--p-neutral-action-disabled, color('sky', 'lighter'));
    box-shadow: none;
  }

  svg {
    fill: var(--p-icon-disabled-on-surface, color('ink', 'lightest'));
  }
}

.Input {
  @include text-style-input;
  position: relative;
  z-index: z-index(contents, $stacking-order);
  display: block;
  flex: 1 1 0%;
  width: 100%;
  min-width: 0;
  min-height: control-height();
  margin: 0;
  padding: control-vertical-padding() $backdrop-horizontal-spacing;
  background: none;
  border: border(transparent);
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  appearance: none;
  caret-color: var(--p-text-on-surface);

  .hasValue & {
    color: var(--p-text-on-surface, color('black'));
  }

  .Prefix + & {
    padding-left: 0;
  }

  &:disabled {
    background: none;
    border: border(transparent);
    color: currentColor;
    opacity: 1;
    -webkit-text-fill-color: currentColor;
  }

  // remove the box shadow in Firefox when the input is invalid
  &:invalid {
    box-shadow: none;
  }

  &::placeholder {
    color: var(--p-text-subdued-on-surface, color('ink', 'lightest'));
  }

  // These properties are used to remove the default "spinner" controls
  // for number fields, since we add our own, custom versions instead.
  &[type='number'] {
    appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      appearance: none;
      margin: 0;
    }
  }
}

.Input-hasClearButton {
  // Hide webkit search input clear button
  &[type='search'] {
    &::-webkit-search-cancel-button {
      appearance: none;
    }
  }
}

.Input-suffixed {
  padding-right: 0;
}

.Input-alignRight {
  text-align: right;
}

.Input-alignLeft {
  text-align: left;
}

.Input-alignCenter {
  text-align: center;
}

.Backdrop {
  position: absolute;
  z-index: z-index(backdrop, $stacking-order);
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: var(--p-surface-foreground, color('white'));
  border: border-width() solid
    var(--p-divider-subdued-on-surface, color('sky', 'dark'));
  border-top-color: var(--p-divider-on-surface, color('sky', 'dark'));
  border-radius: var(--p-border-radius-base, border-radius());
  box-shadow: var(
    --p-override-none,
    (inset 0 1px 0 0 rgba(color('ink', 'lighter'), 0.05))
  );
  pointer-events: none;

  &::after {
    content: '';
    position: absolute;
    top: var(--p-text-field-focus-ring-offset, $textfield-backdrop-offset);
    right: var(--p-text-field-focus-ring-offset, $textfield-backdrop-offset);
    bottom: var(--p-text-field-focus-ring-offset, $textfield-backdrop-offset);
    left: var(--p-text-field-focus-ring-offset, $textfield-backdrop-offset);
    border: var(--p-focus-ring-stroke, border-width(thick)) solid
      var(--p-interactive-focus, color('indigo'));
    border-radius: var(--p-text-field-focus-ring-border-radius, inherit);
    opacity: 0;
    transition: var(--p-override-none, opacity duration() easing());
    pointer-events: none;
  }
}

.Prefix,
.Suffix {
  position: relative;
  z-index: z-index(contents, $stacking-order);
  flex: 0 0 auto;
  color: currentColor;
  user-select: none;
}

.Prefix {
  margin-left: $backdrop-horizontal-spacing;
  margin-right: $prefix-horizontal-spacing;
}

.Suffix {
  margin-left: $addon-horizontal-spacing;
  margin-right: $backdrop-horizontal-spacing;
}

.CharacterCount {
  @include text-emphasis-subdued;
  z-index: z-index(contents, $stacking-order);
  margin: 0 $backdrop-horizontal-spacing 0 $addon-horizontal-spacing;
  pointer-events: none;
  text-align: right;
}

.AlignFieldBottom {
  align-self: flex-end;
  width: 100%;
  padding-bottom: spacing(tight);
}

.ClearButton {
  @include unstyled-button;
  z-index: z-index(contents, $stacking-order);
  margin: 0 $backdrop-horizontal-spacing 0 $addon-horizontal-spacing;

  &:hover:enabled,
  &:focus:enabled {
    @include color-icon('ink', 'lighter');
  }

  &:disabled {
    cursor: default;
  }
}

.Spinner {
  --p-text-field-spinner-offset-large: calc(
    var(--p-text-field-spinner-offset) + #{border-width()}
  );
  z-index: z-index(contents, $stacking-order);
  display: flex;
  align-self: stretch;
  flex-direction: column;
  width: rem(22px);
  margin: var(--p-text-field-spinner-offset-large, 1px);
  color: var(--p-icon-on-surface, color('ink'));
  cursor: pointer;
}

.SpinnerIcon {
  height: $spinner-icon-size;
  width: $spinner-icon-size;
}

.Resizer {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 0;
  visibility: hidden;
  overflow: hidden;
}

.DummyInput {
  @include text-style-input;
  padding: control-vertical-padding() $backdrop-horizontal-spacing;
  border: border(transparent);

  // We need the following properties in order to have long, unbroken
  // strings wrap in the same way they do in textareas.
  @include text-breakword;
  white-space: pre-wrap;
}

.Segment {
  --p-text-field-spinner-border-radius: calc(
    var(--p-border-radius-base) - var(--p-text-field-spinner-offset)
  );
  display: flex;
  flex: 1 1 0%;
  justify-content: center;
  align-items: center;
  appearance: none;
  background: var(
    --p-neutral-action,
    linear-gradient(to bottom, color('white'), color('sky', 'lighter'))
  );
  border: none;
  border-radius: var(--p-text-field-spinner-border-radius, none);
  border-left: var(--p-override-none, border(dark));
  transition: background duration(fast) easing(),
    box-shadow duration(fast) easing();

  &:focus {
    outline: none;
  }

  &:hover {
    background: var(--p-neutral-action-hovered);
  }

  &:active {
    background: var(
      --p-neutral-action-pressed,
      linear-gradient(to bottom, color('sky', 'light'), color('sky', 'light'))
    );
    box-shadow: var(
      --p-override-none,
      (
        inset 0 1px 1px 0 rgba(color('ink', 'lighter'), 0.1),
        inset 0 1px 4px 0 rgba(color('ink', 'lighter'), 0.2)
      )
    );
  }

  &:not(:first-child) {
    margin-top: var(--p-override-none, -1px);
    border-top: var(--p-override-none, border(dark));
  }

  &:first-child {
    border-top-right-radius: var(
      --p-text-field-spinner-border-radius,
      border-radius()
    );
    margin-bottom: var(--p-text-field-spinner-offset);
  }

  &:last-child {
    border-bottom-right-radius: var(
      --p-text-field-spinner-border-radius,
      border-radius()
    );
  }
}
