@import '../../styles/common';

$picker-size: rem(160px);
$dragger-size: rem(18px);
$inner-shadow: inset 0 0 2px 0 rgba(0, 0, 0, 0.5);

@mixin checkers {
  background: repeating-conic-gradient(
      var(--p-surface) 0% 25%,
      var(--p-surface-neutral-subdued) 0% 50%
    )
    50% / var(--p-space-4) var(--p-space-4);
}

.ColorPicker {
  --pc-color: 10;
  --pc-adjustments: 20;
  --pc-dragger: 30;
  user-select: none;
  display: flex;
}

// stylelint-disable selector-max-class
// stylelint-disable selector-max-combinators

.MainColor {
  @include checkers;
  position: relative;
  overflow: hidden;
  height: $picker-size;
  width: $picker-size;

  .fullWidth & {
    width: auto;
    flex-grow: 1;
  }

  // Need an extra pixel to avoid a small color bleed from happening
  border-radius: var(--p-border-radius-base);
  cursor: pointer;

  .Dragger {
    right: 0.5 * $dragger-size;
    margin: 0;
  }

  .ColorLayer {
    border-radius: var(--p-border-radius-base);
  }

  &::after,
  &::before {
    content: '';
    position: absolute;
    z-index: var(--pc-adjustments);
    top: 0;
    left: 0;
    display: block;
    height: 100%;
    width: 100%;
    pointer-events: none;
    border-radius: var(--p-border-radius-base);
  }

  &::before {
    background: linear-gradient(to right, white, transparent);
  }

  &::after {
    background-image: linear-gradient(to top, black, transparent);
  }
}

.Dragger {
  position: relative;
  z-index: var(--pc-dragger);
  bottom: 0.5 * $dragger-size;
  transform: none;
  height: $dragger-size;
  width: $dragger-size;
  margin: 0 auto;
  will-change: transform;
  background: transparent;
  border: var(--p-border-radius-base) solid var(--p-surface);
  border-radius: 50%;
  pointer-events: none;
}

$green: rgb(0, 255, 0);
$purple: rgb(255, 0, 255);
$huepicker-padding: $dragger-size;
$huepicker-bottom-padding-start: $picker-size - $dragger-size;

.HuePicker,
.AlphaPicker {
  position: relative;
  overflow: hidden;
  height: $picker-size;
  width: rem(24px);
  margin-left: var(--p-space-2);
  border-width: var(--p-border-radius-base);
  border-radius: $picker-size * 0.5;
}

.HuePicker {
  background-image: linear-gradient(
    to bottom,
    red $dragger-size,
    yellow,
    $green,
    cyan,
    blue,
    $purple,
    red $huepicker-bottom-padding-start
  );
}

.AlphaPicker {
  @include checkers;
}

.ColorLayer {
  position: absolute;
  z-index: var(--pc-color);
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  pointer-events: none;
}

.Slidable {
  height: 100%;
  width: 100%;
  cursor: pointer;
}
