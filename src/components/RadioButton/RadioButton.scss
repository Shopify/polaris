@import '../../styles/common';

.RadioButton {
  position: relative;
  margin: var(--p-choice-margin, 0);
}

.Input {
  @include visually-hidden;
}
// stylelint-disable selector-max-specificity, selector-max-class, selector-max-combinators, max-nesting-depth
.RadioButton:not(.newDesignLanguage) {
  .Input {
    &:focus,
    &:active,
    &:checked {
      + .Backdrop {
        background: color('indigo');
      }
    }

    &:checked {
      ~ .Icon {
        transform: translate(-50%, -50%) scale(1);
      }
    }

    &:focus,
    &:active {
      + .Backdrop {
        @include control-backdrop(focused);
      }
    }

    &:disabled {
      + .Backdrop {
        @include control-backdrop(disabled);
      }
      ~ .Icon {
        background-color: color('sky', 'dark');
      }
    }
  }

  .Backdrop {
    @include control-backdrop;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: 50%;
    &::after {
      border-radius: 50%;
    }
  }

  .Icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    transform-origin: 50% 50%;
    height: 50%;
    width: 50%;
    background: var(--p-icon-on-interactive, color('indigo'));
    border-radius: 50%;
    transition: control-icon-transition();

    @media (-ms-high-contrast: active) {
      background: ms-high-contrast-color('text');
    }
  }
}

.RadioButton.newDesignLanguage {
  margin: var(--p-choice-margin, 0);

  .Backdrop {
    // ::before is the selected dot, ::after the focus-ring
    position: relative;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
    border: var(--p-control-border-width) solid var(--p-border);
    border-radius: 50%;
    background-color: var(--p-surface);
    transition: border-color var(--p-duration-1-0-0) var(--p-ease);

    &::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      opacity: 0;
      transform: translate(-50%, -50%) scale(0.1);
      transform-origin: 50% 50%;
      height: var(--p-icon-size);
      width: var(--p-icon-size);
      background-color: var(--p-interactive);
      border-radius: 50%;
      transition: opacity var(--p-duration-1-0-0) var(--p-ease),
        transform var(--p-duration-1-0-0) var(--p-ease);

      @media (-ms-high-contrast: active) {
        border: rem(5px) solid ms-high-contrast-color('text');
      }
    }

    @include focus-ring($border-width: var(--p-control-border-width));

    &::after {
      border-radius: 50%;
    }

    &.hover,
    &:hover {
      cursor: pointer;
      border-color: var(--p-border-hovered);
    }
  }

  .Input {
    &.keyFocused {
      + .Backdrop {
        @include focus-ring($style: 'focused');
        &::after {
          border-radius: 50%;
        }
      }
    }

    &:checked {
      + .Backdrop {
        border-color: var(--p-interactive);

        &::before {
          transition: opacity var(--p-duration-1-5-0) var(--p-ease),
            transform var(--p-duration-1-5-0) var(--p-ease);
          opacity: 1;
          transform: translate(-50%, -50%) scale(1);
        }
      }
    }

    &:disabled {
      + .Backdrop {
        border-color: var(--p-border-disabled);

        &::before {
          background-color: var(--p-border-disabled);
        }

        &.hover,
        &:hover {
          cursor: default;
        }
      }
    }
  }
}
// stylelint-enable selector-max-specificity, selector-max-class, selector-max-combinators, max-nesting-depth
