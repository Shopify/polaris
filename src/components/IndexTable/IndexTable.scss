@import '../../styles/common';

$index-table-stacking-order: (
  cell: 1,
  sticky-cell: 31,
  scroll-bar: 35,
  bulk-actions: 36,
  loading-panel: 37,
);

$breakpoint-small: 458px;
$table-header-offset: rem(52px);
$spacing-loose: rem(12px);
$spacing-extra-loose: $spacing-loose + spacing(extra-tight);
$translate-offset: rem(50px) - $spacing-extra-loose;
$checkbox-offset-left: rem(14px);
$checkbox-offset-right: rem(18px);
$small-checkbox-offset: rem(2px);

.IndexTable {
  position: relative;
  overflow: hidden;
  border-radius: inherit;
}

.LoadingContainer-enter {
  opacity: 0;
  transform: translateY(-100%);
}

.LoadingContainer-enter-active {
  opacity: 1;
  transition: opacity duration(fast) ease-out, transform duration(fast) ease-out;
  transform: translateY(0);
}

.LoadingContainer-exit {
  opacity: 1;
  transform: translateY(0);
}

.LoadingContainer-exit-active {
  opacity: 0;
  transform: translateY(-100%);
  transition: opacity duration(fast) ease-in, transform duration(fast) ease-in;
}

$loading-panel-height: rem(53px);

.LoadingPanel {
  position: absolute;
  z-index: z-index(loading-panel, $index-table-stacking-order);
  top: 0;
  left: 0;
  display: flex;
  width: 100%;
  justify-content: center;
  align-items: center;
  background: var(--p-surface);
  padding: spacing('tight') spacing();
  box-shadow: shadow();

  .LoadingPanelRow {
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    background: var(--p-surface-highlight-subdued);
    padding: spacing('tight');
    padding-bottom: spacing('extra-tight');
    border-radius: var(--p-border-radius-base);
  }
}

.LoadingPanelText {
  margin-left: rem(12px);
  color: var(--p-text);
}

.Table {
  width: 100%;
  min-width: 100%;
  border-collapse: collapse;
}

.Table-scrolling {
  // stylelint-disable-next-line selector-max-class, selector-max-combinators
  .TableCell-first,
  .TableCell-first + .TableCell,
  .TableHeading-first,
  .TableHeading-second {
    visibility: visible;
    background-color: var(--p-surface);
  }

  .TableCell-first,
  .TableHeading-first {
    filter: drop-shadow(rem(1px) 0 0 var(--p-divider));
  }

  // stylelint-disable-next-line selector-max-class, selector-max-combinators
  .TableCell-first + .TableCell,
  .TableHeading-second {
    @include breakpoint-after($breakpoint-small) {
      filter: drop-shadow(rem(1px) 0 0 var(--p-divider));
    }
  }

  &.Table-unselectable {
    // stylelint-disable-next-line selector-max-class, selector-max-specificity
    .TableHeading-second,
    .TableCell:first-child {
      visibility: visible;
      filter: drop-shadow(rem(1px) 0 0 var(--p-divider));
    }
  }
}

.TableRow {
  background-color: var(--p-surface);
  cursor: pointer;
  filter: drop-shadow(0 rem(-1px) 0 var(--p-divider));

  &.TableRow-unclickable {
    cursor: auto;
  }

  &.statusSuccess {
    // stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity
    &,
    .TableCell-first,
    .TableCell-first + .TableCell {
      background-color: var(--p-surface-primary-selected);
    }
  }

  &.statusSubdued {
    // stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity
    &,
    .TableCell-first,
    .TableCell-first + .TableCell {
      background-color: var(--p-surface-subdued);
    }
  }

  &.TableRow-hovered {
    // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
    &,
    .TableCell-first,
    .TableCell-first + .TableCell {
      background-color: var(--p-surface-hovered);
    }
  }

  &.TableRow-selected {
    // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
    &,
    .TableHeading-first,
    .TableHeading-second,
    .TableCell-first,
    .TableCell-first + .TableCell {
      background-color: var(--p-surface-selected);
    }
  }

  // stylelint-disable-next-line selector-max-class
  &.TableRow-hovered.TableRow-selected {
    // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
    &,
    .TableCell-first,
    .TableCell-first + .TableCell {
      background-color: var(--p-surface-selected-hovered);
    }
  }
}

.TableRow-subdued {
  color: var(--p-text-subdued);
}

.TableHeading {
  padding: spacing();
  text-align: left;
  font-weight: 500;
  white-space: nowrap;
  border: 0;
}

.TableHeading-first {
  position: sticky;
  left: 0;
  padding-left: $checkbox-offset-left;
  padding-right: $checkbox-offset-right;
}

.ColumnHeaderCheckboxWrapper {
  display: flex;
}

.FirstStickyHeaderElement {
  margin-left: #{-1 * $small-checkbox-offset};
  padding-right: $small-checkbox-offset;
}

.TableHeading-second {
  &:not(.TableHeading-unselectable) {
    padding-left: 0;

    @include breakpoint-after($breakpoint-small) {
      position: sticky;
      z-index: auto;
      left: 0;
    }
  }

  &.TableHeading-unselectable {
    position: sticky;
    z-index: auto;
    left: 0;
  }
}

.TableCell {
  z-index: z-index(cell, $index-table-stacking-order);
  text-align: left;
  padding: spacing(tight) spacing();
  white-space: nowrap;
}

.TableCell-flush {
  padding: 0;
}

.TableCell-first {
  position: sticky;
  left: 0;
  z-index: z-index(sticky-cell, $index-table-stacking-order);
  padding: 0;
}

.TableCell-first + .TableCell {
  left: var(--p-checkbox-offset);
  padding-left: 0;

  @include breakpoint-after($breakpoint-small) {
    position: sticky;
    z-index: z-index(sticky-cell, $index-table-stacking-order);
    padding: 0;
  }
}

.Table-unselectable {
  .TableCell:first-child {
    left: 0;
    background-color: var(--p-surface);
    position: sticky;
    z-index: z-index(sticky-cell, $index-table-stacking-order);
  }

  .statusSuccess {
    // stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity
    .TableCell:first-child {
      background-color: var(--p-surface-primary-selected);
    }
  }

  .statusSubdued {
    // stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity
    .TableCell:first-child {
      background-color: var(--p-surface-subdued);
    }
  }

  .TableRow-hovered {
    // stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity
    .TableCell:first-child {
      background-color: var(--p-surface-hovered);
    }
  }
}

.Table-sticky-scrolling {
  .TableCell:last-child,
  .TableHeading-last {
    @include breakpoint-after($breakpoint-small) {
      filter: drop-shadow(rem(-1px) 0 0 var(--p-divider));
    }
  }
}

.Table-sticky-last {
  .TableCell:last-child {
    @include breakpoint-after($breakpoint-small) {
      position: sticky;
      right: 0;
      background-color: var(--p-surface);
      z-index: z-index(sticky-cell, $index-table-stacking-order);
    }
  }

  .TableHeading-last {
    @include breakpoint-after($breakpoint-small) {
      position: sticky;
      right: 0;
      background-color: var(--p-surface);
      z-index: auto;
    }
  }

  // stylelint-disable selector-max-class, selector-max-combinators, selector-max-specificity
  .statusSuccess {
    .TableCell:last-child {
      background-color: var(--p-surface-primary-selected);
    }
  }

  .statusSubdued {
    .TableCell:last-child {
      background-color: var(--p-surface-subdued);
    }
  }

  .TableRow-hovered {
    .TableCell:last-child {
      background-color: var(--p-surface-hovered);
    }
  }

  .TableRow-selected {
    .TableCell:last-child {
      background-color: var(--p-surface-selected);
    }
  }
}

.StickyTable {
  position: relative;
  top: 0;
  left: 0;
  right: 0;
  visibility: hidden;
  z-index: z-index(loading-panel, $index-table-stacking-order);
}

.StickyTableHeader {
  position: absolute;
  display: flex;
  width: 100%;

  &:not(.StickyTableHeader-isSticky) {
    top: rem(-1000px);
    left: rem(-1000px);
  }
}

.StickyTableColumnHeader {
  flex: 0 0 auto;
}

.StickyTableColumnHeader-isScrolling {
  box-shadow: 1px 1px 0 0 var(--p-divider), 1px 0 1px 1px rgba(63, 63, 68, 0.05),
    1px 0 3px 0 rgba(63, 63, 68, 0.15);
}

.StickyTableHeadings {
  overflow: hidden;
  flex: 1 1 auto;
  display: flex;
}

.StickyTableHeading-second {
  padding-left: 0;

  @include breakpoint-after($breakpoint-small) {
    display: none;
  }

  &.unselectable {
    display: none;
  }
}

.StickyTableHeading-second-scrolling {
  padding: 0 rem(0.6px) 0 spacing();
  display: none;

  @include breakpoint-after($breakpoint-small) {
    display: block;
  }
}

.StickyTableHeader-isSticky {
  visibility: visible;
  background-color: var(--p-surface);
  box-shadow: shadow();
}

.IndexTable:hover {
  .ScrollLeft {
    display: block;
  }

  .ScrollRight {
    display: block;
  }
}

.IndexTable .ScrollRight-onboarding {
  display: block;
}

.BulkActionsWrapper {
  visibility: visible;
  position: relative;
  z-index: z-index(bulk-actions, $index-table-stacking-order);
  top: 0;
  left: 0;
  right: 0;
  padding: spacing('tight');
  background: var(--p-surface);
}

$scroll-bar-size: rem(8px);
$scroll-bar-border-radius: rem(4px);

.ScrollBarContainer {
  position: sticky;
  z-index: z-index(scroll-bar, $index-table-stacking-order);
  bottom: 0;
  padding: rem(2px);
  border-top: border('divider');
  background-color: var(--p-surface);
  border-bottom-right-radius: var(--p-border-radius-base);
  border-bottom-left-radius: var(--p-border-radius-base);
}

.scrollBarContainerCondensed {
  visibility: hidden;
  pointer-events: none;
}

.ScrollBar {
  overflow-x: scroll;
  width: 100%;
  margin: 0;
  padding: 0;
}

.ScrollBar::-webkit-scrollbar-track {
  border-radius: $scroll-bar-border-radius;
  background-color: transparent;
}

.ScrollBar::-webkit-scrollbar {
  appearance: none;
  height: $scroll-bar-size;
  width: $scroll-bar-size;
  background-color: transparent;
}

.ScrollBar::-webkit-scrollbar-thumb {
  border-radius: $scroll-bar-border-radius;
  background-color: var(--p-border-neutral-subdued);
  transition: background-color duration(fast) ease-out;
}

.ScrollBar:hover::-webkit-scrollbar-thumb {
  background-color: var(--p-border-depressed);
}

.disableTextSelection {
  user-select: none;
}

.selectMode {
  transform: translateY(-$table-header-offset);
  margin-bottom: -$table-header-offset;
}

.EmptySearchResultWrapper {
  padding: spacing();
}

.condensedRow {
  width: calc(100% + #{$translate-offset});
  transform: translateX(-1 * $translate-offset);
  transition: transform easing() duration();
  display: flex;
  border-top: border('divider');
  filter: none;
  align-items: center;
}

[data-selectmode='true'] {
  .condensedRow {
    transform: none;
  }
}

.CondensedList {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.HeaderWrapper {
  position: relative;
  display: flex;
  align-items: flex-start;
  width: 100%;
  min-height: 5.6rem;
  padding: 1rem spacing();
  background-color: var(--p-surface);

  &.unselectable {
    min-height: auto;
    padding: 0;
  }
}

.StickyTable-condensed {
  visibility: visible;
}

.StickyTableHeader-condensed {
  padding: 1.6rem spacing() 0.8rem;
}

.ScrollBarContent {
  height: 1px;
  width: var(--p-scroll-bar-content-width);
}
