@import '../../styles/common';

$min-height: control-height();
$vertical-padding: ($min-height - line-height(body) - rem(2px)) / 2;
$slim-min-height: rem(28px);
$slim-vertical-padding: ($slim-min-height - line-height(body) - rem(2px)) / 2;
$large-min-height: rem(44px);
$large-vertical-padding: ($large-min-height - line-height(body) - rem(2px)) / 2;
$spinner-size: rem(20px);

$partial-button-filled-pressed-box-shadow: inset 0 0 0 0 transparent,
  inset 0 1px 1px 0 rgba(22, 29, 37, 0.05), inset 0 0 3px 0;

$stacking-order: (
  segment: 10,
  focused: 20,
);

.Button {
  @include button-base;

  &.disabled {
    @include base-button-disabled;
  }

  &.connectedDisclosure {
    z-index: z-index(segment, $stacking-order);
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    &::after {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    &:focus {
      z-index: z-index(focused, $stacking-order);
    }
  }
}

.Content {
  @include text-style-button;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 1px;
  min-height: 1px;

  .Button:not(.plain) & {
    width: 100%;
  }
}

.textAlignLeft {
  justify-content: flex-start;
  text-align: left;

  .Content {
    justify-content: flex-start;
  }
}

.textAlignCenter {
  justify-content: center;
  text-align: center;
}

.textAlignRight {
  justify-content: flex-end;
  text-align: right;

  .Content {
    justify-content: flex-end;
  }
}

.Icon {
  // This compensates for the typical icon used in buttons being
  // inset within its bounding box.
  margin-left: -(spacing(extra-tight));

  &:last-child {
    // This compensates for the disclosure icon, which is substantially
    // inset within the viewbox (and makes it look like there is too much
    // spacing on the right of the button)
    margin-right: -(spacing(tight));
    margin-left: spacing(extra-tight);
  }

  // stylelint-disable-next-line selector-max-class, selector-max-specificity
  .fullWidth.textAlignLeft &:last-child:not(:only-child) {
    margin-left: auto;
  }

  + *:not(.Icon) {
    margin-left: spacing(extra-tight);
  }
}

.hidden {
  visibility: hidden;
}

.Spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -($spinner-size / 2);
  margin-left: -($spinner-size / 2);
}

.primary {
  --p-button-color: var(--p-action-primary);
  --p-button-text: var(--p-text-on-primary);
  --p-button-color-hover: var(--p-action-primary-hovered);
  --p-button-color-active: var(--p-action-primary-pressed);
  --p-button-color-depressed: var(--p-action-primary-depressed);
  @include button-filled(color('indigo'), color('indigo', 'dark'));
  @include recolor-icon(var(--p-icon-on-primary));

  &.disabled {
    @include recolor-icon(var(--p-icon-disabled));
    background: var(--p-action-primary-disabled);
    color: var(--p-text-disabled);
    border-color: transparent;
    box-shadow: none;
  }
}

.destructive {
  --p-button-color: var(--p-action-critical);
  --p-button-text: var(--p-text-on-critical);
  --p-button-color-hover: var(--p-action-critical-hovered);
  --p-button-color-active: var(--p-action-critical-pressed);
  --p-button-color-depressed: var(--p-action-critical-depressed);
  @include button-filled(color('red'), color('red', 'dark'));
  @include recolor-icon(var(--p-icon-on-critical));

  &.disabled {
    @include recolor-icon(var(--p-icon-disabled));
    background: var(--p-action-critical-disabled);
    color: var(--p-text-disabled);
    box-shadow: none;
    border-color: transparent;
  }
}

.outline {
  @include button-outline(color('ink', 'lighter'));

  &.disabled {
    @include button-outline-disabled(color('ink', 'lighter'));
  }
}

.destructive.outline {
  @include button-outline(color('red'));
}

.disabled {
  cursor: default;
  pointer-events: none;
}

@keyframes loading {
  to {
    transform: rotate(360deg);
  }
}

.loading {
  position: relative;

  &,
  &:hover,
  &.disabled {
    color: transparent;
  }
}

.loading.disabled svg {
  fill: var(--p-icon-subdued);
}

// The way the designs work, we need to do lots of reaching down to
// target the content in pseudo-selectors, so we need higher specificity
// in this case.
// stylelint-disable selector-max-specificity, selector-max-class
.plain {
  @include recolor-icon(var(--p-interactive));
  margin: (-1 * $vertical-padding) rem(-8px);
  padding-left: spacing(tight);
  padding-right: spacing(tight);
  background: transparent;
  border: 0;
  box-shadow: none;
  color: var(--p-interactive);

  > .Content {
    font-weight: 400;
    @include focus-ring;
  }

  &:hover,
  &:focus {
    @include recolor-icon(var(--p-interactive-hovered));
    color: var(--p-interactive-hovered);
    background: transparent;
    box-shadow: none;

    &:not(.removeUnderline) {
      text-decoration: underline;
    }
  }

  &.pressed,
  &:active {
    @include recolor-icon(var(--p-interactive-pressed));
    color: var(--p-interactive-pressed);
    @include high-contrast-button-outline(none);
    background: transparent;
    box-shadow: none;
  }

  &:focus {
    @include no-focus-ring;
    @include high-contrast-button-outline(none);

    > .Content {
      @include high-contrast-button-outline;
    }
  }

  &:focus:not(:active) {
    > .Content {
      @include focus-ring($style: 'focused');
    }
  }

  &:active:not(.iconOnly) > .Content,
  &.pressed:not(.iconOnly) > .Content {
    @include plain-button-backdrop;
  }

  &.fullWidth {
    margin-left: 0;
    margin-right: 0;
  }

  &.disabled {
    color: var(--p-text-disabled);
    background: none;

    &.loading {
      color: transparent;
    }
  }

  &.destructive {
    @include recolor-icon(var(--p-interactive-critical));
    color: var(--p-interactive-critical);

    &:hover {
      color: var(--p-interactive-critical-hovered);
    }

    &:active,
    &.pressed {
      color: var(--p-interactive-critical-pressed);
    }

    &.disabled {
      color: var(--p-interactive-critical-disabled);
    }
  }

  &.sizeSlim {
    margin-top: (-1 * $slim-vertical-padding);
    margin-bottom: (-1 * $slim-vertical-padding);
  }

  &.sizeLarge {
    margin: (-1 * $large-vertical-padding) (-1 * spacing(loose));
  }

  &.iconOnly {
    @include recolor-icon(var(--p-icon));
    margin: -0.5 * ($min-height - icon-size());

    &:hover {
      @include recolor-icon(var(--p-icon-hovered));
    }

    &:active,
    &.pressed {
      @include recolor-icon(var(--p-icon-pressed));
    }

    &.disabled {
      @include recolor-icon(var(--p-icon-disabled));
    }
  }

  &.destructive.iconOnly {
    @include recolor-icon(var(--p-action-critical));

    &:hover {
      @include recolor-icon(var(--p-action-critical-hovered));
    }

    &:active,
    &.pressed {
      @include recolor-icon(var(--p-action-critical-pressed));
    }

    &.disabled {
      @include recolor-icon(var(--p-action-critical-disabled));
    }
  }

  .Icon {
    margin-left: 0;
    margin-right: 0;
  }
}
// stylelint-enable selector-max-specificity, selector-max-class

.fullWidth {
  @include button-full-width;
}

.iconOnly {
  padding-left: spacing(tight);
  padding-right: spacing(tight);

  &.sizeLarge {
    padding-left: spacing(base-tight);
    padding-right: spacing(base-tight);
  }

  .Icon:first-child {
    margin-left: 0;
  }

  .Icon:last-child {
    margin-right: rem(-4px);
  }

  .Icon:only-child {
    margin-right: 0;
  }
}

.sizeSlim {
  min-height: $slim-min-height;
  padding: $slim-vertical-padding spacing(base-tight);
}

.sizeLarge {
  min-height: $large-min-height;
  min-width: $large-min-height;
  padding: $large-vertical-padding rem(24px);

  .Content {
    @include text-style-button-large;
  }
}

// stylelint-disable selector-max-specificity
.monochrome {
  &.outline,
  &.plain {
    @include recolor-icon(currentColor);
    color: currentColor;

    &:hover,
    &:focus,
    &:active {
      @include recolor-icon(currentColor);
      color: currentColor;
    }

    // stylelint-disable selector-max-class
    &.disabled {
      color: currentColor;
      @include recolor-icon(currentColor);
      opacity: 0.4;
    }

    &.iconOnly {
      @include recolor-icon(currentColor);

      &:focus,
      &:active {
        @include recolor-icon(currentColor);
      }

      &.disabled {
        @include recolor-icon(currentColor);
      }
    }
    // stylelint-enable selector-max-class
  }

  &.plain {
    // stylelint-disable selector-max-class, max-nesting-depth
    .Text:not(.removeUnderline) {
      text-decoration: underline;
    }
    // stylelint-enable selector-max-class, max-nesting-depth
  }

  &.outline {
    position: relative;
    border-color: currentColor;
    // stylelint-disable selector-max-class
    box-shadow: 0 0 0 border-width('base') currentColor;
    @include focus-ring($border-width: rem(2px));

    &::before {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: currentColor;
      opacity: 0;
      z-index: 0;
    }

    &.pressed {
      background: transparent;
      box-shadow: none;
      color: currentColor;

      &::before {
        opacity: 0.2;
      }
    }

    &:hover,
    &:focus,
    &:active {
      background-color: transparent;
      border-color: currentColor;
      &::before {
        opacity: 0.07;
      }
    }

    &:focus {
      box-shadow: 0 0 0 1px currentColor;
      @include focus-ring($style: 'focused');
    }

    &:active::after {
      box-shadow: none;
    }

    &:hover,
    &:active {
      // stylelint-disable-next-line max-nesting-depth
      &::before {
        opacity: 0.05;
      }
    }
    // stylelint-enable selector-max-class
  }
}
// stylelint-enable selector-max-specificity

.ConnectedDisclosureWrapper {
  display: flex;
}

.ConnectedDisclosure {
  z-index: z-index(segment, $stacking-order);
  margin-left: -(border-width());
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  height: 100%;

  // Because the outline border color has a 40% opacity, the left border appears darker than the rest of the borders because they are layered over one another. Reducing the opacity to zero for the connected disclosure when not focused gives us the expected border color.
  &.outline:not(:focus) {
    border-left-color: rgba(color('ink', 'lighter'), 0);
  }

  &:focus,
  &:active {
    z-index: z-index(focused, $stacking-order);
  }

  &.primary,
  &.destructive {
    margin-left: rem(1px);

    // stylelint-disable-next-line selector-max-class
    &.outline {
      margin-left: 0;
      border-left: 0;
    }
  }

  &::after {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}
// stylelint-disable selector-max-combinators, selector-max-compound-selectors, selector-max-specificity
[data-buttongroup-segmented='true'] {
  .Button,
  .Button::after {
    border-radius: 0;
  }
  > :first-child .Button,
  > :first-child .Button::after {
    border-radius: 0;
    border-top-left-radius: var(--p-border-radius-base, border-radius());
    border-bottom-left-radius: var(--p-border-radius-base, border-radius());
  }
  > :last-child .Button,
  > :last-child .Button::after {
    border-radius: 0;
    border-top-right-radius: var(--p-border-radius-base, border-radius());
    border-bottom-right-radius: var(--p-border-radius-base, border-radius());
  }

  > :last-child:first-child .Button,
  > :last-child:first-child .Button::after {
    border-radius: var(--p-border-radius-base, border-radius());
  }
}

[data-buttongroup-connected-top='true'] {
  > :first-child .Button,
  > :first-child .Button::after {
    border-top-left-radius: 0;
  }

  > :last-child .Button,
  > :last-child .Button::after {
    border-top-right-radius: 0;
  }
}

[data-buttongroup-full-width='true'] {
  .Button {
    @include button-full-width;
  }
}
// stylelint-enable selector-max-combinators, selector-max-compound-selectors, selector-max-specificity
