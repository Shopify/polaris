@import '../../styles/common';

$min-height: control-height();
$vertical-padding: ($min-height - line-height(body) - rem(2px)) / 2;
$slim-min-height: rem(30px);
$slim-vertical-padding: ($slim-min-height - line-height(body) - rem(2px)) / 2;
$large-min-height: rem(44px);
$large-vertical-padding: ($large-min-height - line-height(body) - rem(2px)) / 2;
$spinner-size: rem(20px);
// darken(color(sky, dark), 4%)
$pressed-border-color: rgb(184, 195, 205);
// darken(color(sky), 2%)
$pressed-hover-background: rgb(217, 222, 228);
// darken(color(sky), 4%)
$pressed-active-background: rgb(211, 217, 223);
// darken(color('indigo'), 10%)
$primary-pressed-lightest: rgb(63, 78, 174);
// darken(color('indigo'), 12%)
$primary-pressed-light: rgb(60, 75, 167);
// darken(color('indigo', 'dark'), 15%)
$primary-pressed-dark: rgb(16, 23, 60);
// darken(color('indigo', 'dark'), 20%)
$primary-pressed-darkest: rgb(11, 15, 39);
// darken(color('red'), 10%)
$destructive-pressed-lightest: rgb(176, 43, 19);
// darken(color('red'), 12%)
$destructive-pressed-light: rgb(167, 41, 18);
// darken(color('red', 'dark'), 15%)
$destructive-pressed-dark: rgb(117, 4, 10);
// darken(color('red', 'dark'), 20%)
$destructive-pressed-darkest: rgb(93, 3, 8);
$partial-button-filled-pressed-box-shadow: inset 0 0 0 0 transparent,
  inset 0 1px 1px 0 rgba(22, 29, 37, 0.05), inset 0 0 3px 0;

@mixin pressed-box-shadow($color: transparent) {
  box-shadow: 0 0 0 1px $color,
    inset 0 1px 1px 0 rgba(color('ink', 'lighter'), 0.1),
    inset 0 1px 4px 0 rgba(color('ink', 'lighter'), 0.1);
}

@mixin button-filled-pressed(
  $color-lightest,
  $color-light,
  $color-dark,
  $color-darkest
) {
  background: linear-gradient(to bottom, $color-lightest, $color-lightest);
  border-color: $color-dark;
  box-shadow: $partial-button-filled-pressed-box-shadow $color-dark;

  &:focus,
  &:hover {
    transition-duration: duration(fast);
    background: linear-gradient(to bottom, $color-light, $color-light);
    border-color: $color-dark;
    box-shadow: $partial-button-filled-pressed-box-shadow$color-dark;
  }

  &:active {
    background: linear-gradient(to bottom, $color-lightest, $color-lightest);
    border-color: $color-dark;
    box-shadow: $partial-button-filled-pressed-box-shadow$color-darkest;
  }
}

.Button {
  @include button-base;

  &.disabled {
    @include base-button-disabled;
  }
}

.Content {
  @include text-style-button;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 1px;
  min-height: 1px;
}

.textAlignLeft {
  justify-content: flex-start;
  text-align: left;
}

.textAlignCenter {
  justify-content: center;
  text-align: center;
}

.textAlignRight {
  justify-content: flex-end;
  text-align: right;
}

.Icon {
  transition: color duration() easing();

  &:first-child {
    // This compensates for the typical icon used in buttons being
    // inset within its bounding box.
    margin-left: -(spacing(extra-tight));
  }

  &:last-child {
    // This compensates for the disclosure icon, which is substantially
    // inset within the viewbox (and makes it look like there is too much
    // spacing on the right of the button)
    margin-right: -(spacing(tight));
    margin-left: spacing(extra-tight);
  }

  + *:not(.Icon) {
    margin-left: spacing(extra-tight);
  }
}

.Spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -($spinner-size / 2);
  margin-left: -($spinner-size / 2);
}

.primary {
  --p-button-color: var(--p-branded-action);
  --p-button-color-hover: var(--p-branded-action-hovered);
  --p-button-color-active: var(--p-branded-action-pressed);
  @include button-filled(color('indigo'), color('indigo', 'dark'));
  @include recolor-icon(color('white'));

  &.disabled {
    @include button-filled-disabled(color('indigo'));
  }

  &.pressed {
    @include button-filled-pressed(
      $primary-pressed-lightest,
      $primary-pressed-light,
      $primary-pressed-dark,
      $primary-pressed-darkest
    );
  }
}

.destructive {
  --p-button-color: var(--p-critical-action);
  --p-button-color-hover: var(--p-critical-action-hovered);
  --p-button-color-active: var(--p-critical-action-pressed);
  @include button-filled(color('red'), color('red', 'dark'));
  @include recolor-icon(color('white'));

  &.disabled {
    @include button-filled-disabled(color('red'));
  }

  &.pressed {
    @include button-filled-pressed(
      $destructive-pressed-lightest,
      $destructive-pressed-light,
      $destructive-pressed-dark,
      $destructive-pressed-darkest
    );
  }
}

.outline {
  @include button-outline(color('ink', 'lighter'));

  &.disabled {
    @include button-outline-disabled(color('ink', 'lighter'));
  }
}

.destructive.outline {
  @include button-outline(color('red'));
  @include recolor-icon(color('red', 'dark'));

  &.pressed {
    @include button-outline(
      color('red', 'dark'),
      rgba(color('red', 'dark'), 0.03)
    );
    @include recolor-icon(color('red', 'darker'));
  }
}

.disabled {
  cursor: default;
  pointer-events: none;
}

@keyframes loading {
  to {
    transform: rotate(360deg);
  }
}

.loading,
.globalTheming.loading {
  position: relative;
  transition: border-color duration() easing();

  // stylelint-disable-next-line selector-max-class
  &,
  &:hover,
  &.disabled {
    color: transparent;
  }
}

.pressed {
  background: color(sky);
  border-color: $pressed-border-color;
  @include pressed-box-shadow;

  &:hover {
    transition-duration: duration(fast);
    background: $pressed-hover-background;
    border-color: $pressed-border-color;
    @include pressed-box-shadow;
  }

  &:focus {
    border-color: color('indigo');
    @include pressed-box-shadow(color('indigo'));
  }

  &:active {
    background: $pressed-active-background;
    border-color: $pressed-border-color;
    @include pressed-box-shadow;
  }

  @media (-ms-high-contrast: active) {
    color: ms-high-contrast-color('button-text');
    background: ms-high-contrast-color('button-text-background');
  }
}

// The way the designs work, we need to do lots of reaching down to
// target the content in pseudo-selectors, so we need higher specificity
// in this case.
// stylelint-disable selector-max-specificity

.plain {
  @include recolor-icon(color('blue'));
  margin: (-1 * $vertical-padding) rem(-8px);
  padding-left: spacing(tight);
  padding-right: spacing(tight);
  background: transparent;
  border: 0;
  box-shadow: none;
  color: color('blue');

  &.pressed,
  &:hover,
  &:focus,
  &:active {
    @include recolor-icon(color('blue', 'dark'));
    background: transparent;
    border: 0;
    box-shadow: none;
    color: color('blue', 'dark');
    text-decoration: underline;
  }

  &.pressed,
  &:focus {
    @include high-contrast-button-outline(none);
  }

  &:focus > .Content {
    @include high-contrast-button-outline;
  }

  &.pressed > .Content {
    @include plain-button-backdrop(rgba(color('ink', 'lighter'), 0.1));
  }

  &.pressed:hover:not(.iconOnly) > .Content,
  &.pressed:active:not(.iconOnly) > .Content,
  &:focus:not(.iconOnly) > .Content {
    @include plain-button-backdrop;
  }

  &.fullWidth {
    margin-left: 0;
    margin-right: 0;
  }

  &.destructive {
    color: color('red', 'dark');
    &:hover {
      color: color('red', 'darker');
    }
  }

  &.disabled {
    background: none;
  }

  &.sizeSlim {
    margin-top: (-1 * $slim-vertical-padding);
    margin-bottom: (-1 * $slim-vertical-padding);
  }

  &.sizeLarge {
    margin: (-1 * $large-vertical-padding) (-1 * spacing(loose));
  }
  &.iconOnly {
    @include recolor-icon(color('ink', 'lighter'));
    margin: -0.5 * ($min-height - icon-size());

    &:focus,
    &:active {
      @include recolor-icon(color('ink', 'lighter'));
      background: plain-button-background();
    }

    &:hover,
    &:active {
      @include recolor-icon(color('ink'));
    }

    // stylelint-disable-next-line selector-max-class
    > .Content::after {
      display: none;
    }

    &.disabled {
      @include recolor-icon(color('sky', 'dark'));
    }
  }

  .Icon {
    margin-left: 0;
    margin-right: 0;
  }

  // stylelint-disable selector-max-class
  &.globalTheming {
    // redeclaring these styles here for specificity
    background: transparent;
    border: 0;
    box-shadow: none;
    @include recolor-icon(var(--p-interactive-action));
    color: var(--p-interactive-action);

    &:hover,
    &:focus,
    &:active {
      background: transparent;
      border: 0;
      box-shadow: none;
    }

    > .Content {
      font-weight: 400;
    }

    &:hover {
      @include recolor-icon(var(--p-interactive-action-hovered));
      color: var(--p-interactive-action-hovered);
      text-decoration: underline;
    }

    &:focus {
      @include recolor-icon(var(--p-interactive-action));
      color: var(--p-interactive-action);
      text-decoration: none;
      @include no-focus-ring;
    }

    &:active {
      @include recolor-icon(var(--p-interactive-action-pressed));
      color: var(--p-interactive-action-pressed);
      text-decoration: none;
    }

    &:focus:not(:active) > .Content {
      @include focus-ring;
    }

    &:focus:not(.iconOnly) > .Content {
      background: none;
    }

    &:active:not(.iconOnly) > .Content {
      @include plain-button-backdrop(var(--p-neutral-action));
    }

    &.destructive {
      @include recolor-icon(var(--p-critical-link));
      color: var(--p-critical-link);
      &:hover {
        color: var(--p-critical-link-hovered);
      }
      &:active {
        color: var(--p-critical-link-pressed);
      }

      &.disabled {
        color: var(--p-critical-link-disabled);
      }
    }

    &.disabled {
      color: var(--p-text-disabled-on-surface);
      background: none;
    }

    &.iconOnly {
      @include recolor-icon(var(--p-interactive-action));

      &:hover {
        @include recolor-icon(var(--p-interactive-action-hovered));
      }

      &:focus {
        @include recolor-icon(var(--p-interactive-action));
      }

      &:active {
        @include recolor-icon(var(--p-interactive-action-pressed));
      }

      &.disabled {
        @include recolor-icon(var(--p-interactive-action-disabled));
      }
    }

    &.destructive.iconOnly {
      @include recolor-icon(var(--p-critical-action));

      &:hover {
        @include recolor-icon(var(--p-critical-action-hovered));
      }

      &:focus {
        @include recolor-icon(var(--p-critical-action));
      }

      &:active {
        @include recolor-icon(var(--p-critical-action-pressed));
      }

      &.disabled {
        @include recolor-icon(var(--p-critical-action-disabled));
      }
    }
  }
  // stylelint-enable selector-max-class
}

// stylelint-enable selector-max-specificity

.sizeSlim {
  min-height: $slim-min-height;
  padding: $slim-vertical-padding spacing(base-tight);
}

.sizeLarge {
  min-height: $large-min-height;
  min-width: $large-min-height;
  padding: $large-vertical-padding rem(24px);

  .Content {
    @include text-style-button-large;
  }
}

.fullWidth {
  @include button-full-width;
}

.iconOnly {
  padding-left: spacing(tight);
  padding-right: spacing(tight);

  &.sizeLarge {
    padding-left: spacing(base-tight);
    padding-right: spacing(base-tight);
  }

  .Icon:first-child {
    margin-left: 0;
  }

  .Icon:last-child {
    margin-right: rem(-4px);
  }

  .Icon:only-child {
    margin-right: 0;
  }
}

// stylelint-disable selector-max-specificity
.monochrome {
  &.outline,
  &.plain {
    @include recolor-icon(currentColor);
    color: currentColor;

    &:hover,
    &:focus,
    &:active {
      @include recolor-icon(currentColor);
      color: currentColor;
    }

    &.disabled {
      color: currentColor;
      @include recolor-icon(currentColor);
      opacity: 0.4;
    }

    &.iconOnly {
      @include recolor-icon(currentColor);

      &:focus,
      &:active {
        @include recolor-icon(currentColor);
      }

      &.disabled {
        @include recolor-icon(currentColor);
      }
    }
  }

  &.plain {
    // stylelint-disable selector-max-class, max-nesting-depth
    .Text {
      text-decoration: underline;
    }
    // stylelint-enable selector-max-class, max-nesting-depth
  }

  &.outline {
    position: relative;
    border-color: currentColor;

    &::before {
      content: '';
      transition: opacity duration() easing();
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: currentColor;
      opacity: 0;
      z-index: 0;
    }

    &.pressed {
      background: transparent;
      border-color: currentColor;
      box-shadow: none;

      // stylelint-disable selector-max-class
      &::before {
        opacity: 0.05;
      }
    }

    &:hover,
    &:focus,
    &:active {
      background-color: transparent;
      border-color: currentColor;
      &::before {
        opacity: 0.07;
      }
    }

    &.globalTheming {
      box-shadow: 0 0 0 border-width('base') currentColor;

      &:focus {
        box-shadow: 0 0 0 border-width('thick') currentColor;
        @include no-focus-ring;
      }
    }
    // stylelint-enable selector-max-class
  }
}
// stylelint-enable selector-max-specificity
