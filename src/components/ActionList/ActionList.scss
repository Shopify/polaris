@import '../../styles/common';

$image-size: rem(20px);
$item-min-height: rem(40px);
$item-vertical-padding: ($item-min-height - line-height(body)) / 2;

.ActionList {
  list-style: none;
  margin: 0;
  padding: spacing(tight) 0;

  &.newDesignLanguage {
    padding: spacing(tight);
  }
}

.Section-withoutTitle:not(:first-child) {
  border-top: border();
  margin-top: spacing(tight);
  padding-top: spacing(tight);
}

.Actions {
  list-style: none;
  margin: 0;
  padding: 0;
  border-top: border();
}

.ActionList,
.Section:first-child {
  // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
  > .Section-withoutTitle .Actions {
    border-top: none;
  }
}

.Title {
  @include text-style-subheading;
  padding: (spacing(tight) * 1.5) spacing();
}

.Item {
  @include unstyled-button;
  @include unstyled-link;
  display: block;
  width: 100%;
  min-height: $item-min-height;
  padding: $item-vertical-padding spacing();
  text-align: left;
  cursor: pointer;
  border-radius: 0;

  &.active {
    background-image: linear-gradient(
      rgba(179, 188, 245, 0.1),
      rgba(179, 188, 245, 0.1)
    );
  }

  &:active {
    background-image: linear-gradient(
      rgba(179, 188, 245, 0.1),
      rgba(179, 188, 245, 0.1)
    );

    &:hover {
      background-image: linear-gradient(
          rgba(179, 188, 245, 0.1),
          rgba(179, 188, 245, 0.1)
        ),
        linear-gradient(rgba(223, 227, 232, 0.3), rgba(223, 227, 232, 0.3));

      // stylelint-disable-next-line selector-max-specificity
      &:focus {
        box-shadow: inset 0.2rem 0 0 color('indigo');
        background-image: linear-gradient(
            rgba(179, 188, 245, 0.1),
            rgba(179, 188, 245, 0.1)
          ),
          linear-gradient(rgba(223, 227, 232, 0.3), rgba(223, 227, 232, 0.3)),
          linear-gradient(rgba(223, 227, 232, 0.3), rgba(223, 227, 232, 0.3));
      }
    }
  }

  &:hover {
    background-image: linear-gradient(
      rgba(223, 227, 232, 0.3),
      rgba(223, 227, 232, 0.3)
    );

    &:focus {
      box-shadow: inset 0.2rem 0 0 color('indigo');
      background-image: linear-gradient(
          rgba(223, 227, 232, 0.3),
          rgba(223, 227, 232, 0.3)
        ),
        linear-gradient(rgba(223, 227, 232, 0.3), rgba(223, 227, 232, 0.3));
    }
  }

  &:focus {
    box-shadow: inset 0.2rem 0 0 color('indigo');
    background-image: linear-gradient(
      rgba(223, 227, 232, 0.3),
      rgba(223, 227, 232, 0.3)
    );
  }

  &.destructive {
    @include recolor-icon(color('red', 'dark'));
    color: color('red', 'dark');

    &:active {
      background-image: linear-gradient(
        rgba(220, 56, 37, 0.03),
        rgba(220, 56, 37, 0.03)
      );

      // stylelint-disable-next-line selector-max-specificity
      &:hover {
        background-image: linear-gradient(
            rgba(220, 56, 37, 0.03),
            rgba(220, 56, 37, 0.03)
          ),
          linear-gradient(rgba(251, 234, 229, 0.4), rgba(251, 234, 229, 0.4));

        // stylelint-disable-next-line selector-max-specificity, max-nesting-depth
        &:focus {
          box-shadow: inset 0.2rem 0 0 color('red');
          background-image: linear-gradient(
              rgba(220, 56, 37, 0.03),
              rgba(220, 56, 37, 0.03)
            ),
            linear-gradient(rgba(251, 234, 229, 0.4), rgba(251, 234, 229, 0.4)),
            linear-gradient(rgba(251, 234, 229, 0.4), rgba(251, 234, 229, 0.4));
        }
      }
    }

    &:hover {
      background-image: linear-gradient(
        rgba(251, 234, 229, 0.4),
        rgba(251, 234, 229, 0.4)
      );

      // stylelint-disable-next-line selector-max-specificity
      &:focus {
        box-shadow: inset 0.2rem 0 0 color('red');
        background-image: linear-gradient(
            rgba(251, 234, 229, 0.4),
            rgba(251, 234, 229, 0.4)
          ),
          linear-gradient(rgba(251, 234, 229, 0.4), rgba(251, 234, 229, 0.4));
      }
    }

    &:focus {
      box-shadow: inset 0.2rem 0 0 color('red');
      background-image: linear-gradient(
        rgba(251, 234, 229, 0.4),
        rgba(251, 234, 229, 0.4)
      );
    }
  }

  &.disabled {
    background-image: linear-gradient(
      rgba(249, 250, 251, 1),
      rgba(249, 250, 251, 1)
    );
    color: color('ink', 'lightest');
    pointer-events: none;

    // stylelint-disable-next-line selector-max-class
    .Image {
      @include recolor-icon(color('ink', 'lightest'), color('white'));
    }
  }

  &::-moz-focus-inner {
    border: none;
  }

  // stylelint-disable selector-max-class
  // stylelint-disable selector-max-specificity
  &.newDesignLanguage {
    padding: $item-vertical-padding spacing(tight);
    border-radius: var(--p-border-radius-base);
    // States
    // Hovered (:hover)
    &:hover {
      background-image: none;
      background-color: var(--p-surface-hovered);

      @media (-ms-high-contrast: active) {
        outline: 1px solid ms-high-contrast-color('text');
      }
    }
    // Active (.active, :active)
    // We need to decide if the .active state appears as pressed or focused
    // Focused might be odd, as another item could be focused simultaneously
    &.active,
    &:active {
      background-image: none;
      background-color: var(--p-surface-pressed);
    }

    // Active, hovered, focused (:active:hover:focus)
    &:active:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Hovered, focused (:hover:focus)
    &:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Focused (:focus)
    &:focus {
      box-shadow: none;
      background-image: none;
    }

    @include focus-ring;

    &:focus:not(:active) {
      @include focus-ring($style: 'focused');
    }

    // Destructive (.destructive)
    &.destructive {
      @include recolor-icon(var(--p-icon-critical));
      color: var(--p-interactive-critical);
    }

    // Hovered (:hover)
    &.destructive:hover {
      background-image: none;
      background-color: var(--p-surface-critical-subdued-hovered);
    }

    // Destructive, active (.destructive.active, .destructive:active)
    &.destructive.active,
    &.destructive:active {
      background-image: none;
      background-color: var(--p-surface-critical-subdued-pressed);
    }

    // Destructive, active, hovered, focused (.destructive:active:hover:focus)
    &.destructive:active:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Destructive, hovered, focused (.destructive:hover:focus)
    &.destructive:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Destructive, focused (.destructive:focus)
    &.destructive:focus {
      box-shadow: none;
      background-image: none;
    }

    // Disabled (.disabled)
    &.disabled {
      background-image: none;
      color: var(--p-text-disabled);
      .Image {
        @include recolor-icon(var(--p-icon-disabled));
      }
    }
  }
  // stylelint-enable selector-max-specificity
  // stylelint-enable selector-max-class
}

.Content {
  display: flex;
  align-items: center;
}

.Image {
  @include recolor-icon(color('ink', 'light'), color('white'));
  display: flex;
  flex: 0 0 auto;
  justify-content: center;
  align-items: center;
  height: $image-size;
  width: $image-size;
  border-radius: border-radius();

  // We need the negative margin to ensure that the image does not set
  // the minimum height of the action item.
  margin: (-0.5 * $image-size) spacing() (-0.5 * $image-size) 0;
  background-size: cover;
  background-position: center center;
}

.Text {
  @include layout-flex-fix;
  flex: 1 1 auto;
}

.BadgeWrapper {
  margin-left: spacing();
}
