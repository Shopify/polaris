@import '../../../../styles/common';
@import '../../RangeSlider';

$stacking-order: (
  input: 10,
  output: 20,
);

$range-wrapper: rem(28px);

$range-thumb-border-error: rem(2px) solid color('red');

.Wrapper {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
}

.TrackWrapper {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: $range-wrapper;
  cursor: pointer;

  &.disabled {
    opacity: 0.8;
    cursor: not-allowed;
  }
}

.Track {
  position: absolute;
  z-index: 1;
  width: 100%;
  height: $range-track-height;
  border-radius: $range-thumb-size;

  --unselected-range: #{var(--p-override-transparent)};
  --selected-range: #{var(--p-interactive)};
  --gradient-colors: var(--unselected-range) 0%,
    var(--unselected-range) var(--Polaris-RangeSlider-progress-lower),
    var(--selected-range) var(--Polaris-RangeSlider-progress-lower),
    var(--selected-range) var(--Polaris-RangeSlider-progress-upper),
    var(--unselected-range) var(--Polaris-RangeSlider-progress-upper),
    var(--unselected-range) 100%;
  background-image: linear-gradient(to right, var(--gradient-colors));

  .error & {
    --selected-range: #{var(--p-action-critical)};
    --gradient-colors: var(--unselected-range) 0%,
      var(--unselected-range) var(--Polaris-RangeSlider-progress-lower),
      var(--selected-range) var(--Polaris-RangeSlider-progress-lower),
      var(--selected-range) var(--Polaris-RangeSlider-progress-upper),
      var(--unselected-range) var(--Polaris-RangeSlider-progress-upper),
      var(--unselected-range) 100%;
    background-image: linear-gradient(to right, var(--gradient-colors));
  }

  .disabled & {
    background: var(--p-border-disabled) none;
  }
}

.Track--dashed {
  @include track-dashed;
}

.Thumbs {
  @include focus-ring($size: 'wide', $border-width: border-width());
  position: absolute;
  z-index: z-index('input', $stacking-order);
  padding: 0;
  width: $range-thumb-size;
  height: $range-thumb-size;
  border-radius: 50%;
  border: border-width() solid var(--p-interactive);
  background: linear-gradient(var(--p-interactive), var(--p-interactive));
  -webkit-tap-highlight-color: transparent;

  // stylelint-disable-next-line value-no-vendor-prefix
  cursor: -webkit-grab;
  transition: transform var(--p-duration-1-5-0) var(--p-ease);

  &.disabled {
    cursor: not-allowed;
    border-color: var(--p-border-disabled);
    background: var(--p-border-disabled);
  }

  &:active {
    transform: scale(var(--p-range-slider-thumb-scale));
  }

  &:focus {
    @include focus-ring($style: 'focused');
    outline: 0;
    border-color: var(--p-override-transparent);
  }

  .error & {
    border-color: var(--p-action-critical);
    background: linear-gradient(
      var(--p-action-critical),
      var(--p-action-critical)
    );
  }
}

$range-output-size: rem(32px);
$range-output-spacing: rem(16px);

.Prefix {
  flex: 0 0 auto;
  margin-right: spacing(tight);
}

.Suffix {
  flex: 0 0 auto;
  margin-left: spacing(tight);
}

.Output {
  position: absolute;
  z-index: z-index('output', $stacking-order);
  bottom: var(--p-range-slider-thumb-size-active);
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition-property: opacity, visibility, bottom;
  transition-duration: var(--p-duration-1-5-0);
  transition-timing-function: var(--p-ease);
  transform: translateX(calc(-50% + #{$range-thumb-size / 2}));

  .Thumbs:hover + &,
  .Thumbs:focus + & {
    opacity: var(--p-override-zero);
  }

  .Thumbs:active + & {
    $range-thumb-size-difference: var(--p-range-slider-thumb-size-active) -
      var(--p-range-slider-thumb-size-base);
    opacity: 1;
    visibility: visible;
    bottom: calc(
      #{var(--p-range-slider-thumb-size-active)} + #{$range-thumb-size-difference}
    );
  }
}

.OutputBubble {
  position: relative;
  display: flex;
  padding: 0 spacing(tight);
  min-width: $range-output-size;
  height: $range-output-size;
  background-color: var(--p-surface);
  box-shadow: var(--p-popover-shadow);
  border-radius: border-radius();
  transition-property: transform;
  transition-duration: var(--p-duration-1-5-0);
  transition-timing-function: var(--p-ease);

  // stylelint-disable selector-max-specificity, selector-max-combinators, selector-max-class
  .Thumbs:hover + .Output &,
  .Thumbs:active + .Output &,
  .Thumbs:focus + .Output & {
    transform: translateY(-$range-output-spacing);

    @include page-content-when-not-partially-condensed {
      transform: translateY(-($range-output-spacing / 2));
    }
  }
  // stylelint-enable selector-max-specificity, selector-max-combinators, selector-max-class
}

.OutputText {
  @include text-style-subheading;
  display: block;
  flex: 1 1 auto;
  margin: auto;
  text-align: center;
  color: var(--p-text);
}
