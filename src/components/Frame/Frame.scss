@import '../../styles/common';

$button-size: rem(32px);
$skip-vertical-offset: rem(10px);

.Frame {
  width: 100%;
  min-height: 100vh;
  display: flex;
  background-color: var(--p-background, color('sky', 'light'));

  @include when-printing {
    background-color: none;
  }

  @include frame-when-nav-displayed {
    width: calc(100% - var(--p-frame-offset));
    margin-left: var(--p-frame-offset);
  }
}

.Navigation {
  @include hidden-when-printing;
  position: fixed;
  z-index: z-index(nav, $fixed-element-stacking-order);
  top: 0;
  left: 0;
  display: none;
  flex: 0 0 auto;
  align-items: stretch;
  height: 100%;
  outline: none;
  transform: translateX(0%);

  @include frame-when-nav-displayed {
    z-index: 1;
    left: var(--p-frame-offset);
    display: flex;

    &:not(.Navigation-newDesignLanguage) {
      .hasTopBar & {
        top: top-bar-height();
        height: calc(100% - #{top-bar-height()});
      }
    }
  }

  &:focus {
    outline: none;
  }
}

.Navigation-enter,
.Navigation-enterActive,
.Navigation-exit,
.Navigation-exitActive {
  display: flex;
}

.Navigation-enter {
  transform: translateX(-100%);
}

.Navigation-enterActive {
  transform: translateX(0%);
  transition: transform duration(slow) easing(out);
}

.Navigation-exit {
  transform: translateX(0%);
}

.Navigation-exitActive {
  transform: translateX(-100%);
  transition: transform duration(slow) easing(out);
}

.NavigationDismiss {
  @include hidden-when-printing;
  position: absolute;
  top: 0;
  left: 100%;
  width: $button-size;
  height: $button-size;
  margin: spacing();
  padding: 0;
  border: none;
  background: none;
  opacity: 0;
  pointer-events: none;
  will-change: opacity;
  cursor: pointer;
  transition: opacity duration(fast) easing();

  .Navigation-visible & {
    pointer-events: all;
    opacity: 1;
  }

  &:focus {
    border-radius: border-radius();
    background-color: var(--p-override-transparent, rgba(color('white'), 0.16));
    outline: none;
  }

  @include frame-when-nav-displayed {
    display: none;
  }

  .Navigation-newDesignLanguage & {
    border-radius: 50%;

    &:hover {
      background-color: var(--p-overlay);
    }

    &:focus {
      @include focus-ring;
      position: absolute;
    }

    &:active {
      background-color: var(--p-overlay);
    }
  }
}

.TopBar {
  @include hidden-when-printing;
  position: fixed;
  z-index: z-index(top-bar, $fixed-element-stacking-order);
  top: 0;
  left: 0;
  width: 100%;
  height: top-bar-height();

  @include frame-when-nav-displayed {
    left: var(--p-frame-offset);
    width: calc(100% - var(--p-frame-offset));
  }

  &.TopBar-newDesignLanguage {
    @include frame-when-nav-displayed {
      // stylelint-disable-next-line selector-max-class
      .hasNav & {
        left: calc(#{layout-width(new-nav)} + var(--p-frame-offset));
        width: calc(100% - #{layout-width(new-nav)} - var(--p-frame-offset));
      }
    }
  }
}

.ContextualSaveBar {
  position: fixed;
  z-index: z-index(context-bar, $fixed-element-stacking-order);
  top: 0;
  left: 0;
  width: 100%;

  @include frame-when-nav-displayed {
    left: var(--p-frame-offset);
    width: calc(100% - var(--p-frame-offset));
  }
}

.ContextualSaveBar-newDesignLanguage {
  @include frame-when-nav-displayed {
    .hasNav & {
      left: calc(#{layout-width(new-nav)} + var(--p-frame-offset));
      max-width: calc(100% - #{layout-width(new-nav)} - var(--p-frame-offset));
    }
  }
}

.Main {
  flex: 1;
  display: flex;
  align-items: stretch;

  @include layout-flex-fix;

  @include safe-area-for(padding-right, 0, right);
  @include safe-area-for(padding-left, 0, left);
  @include safe-area-for(padding-bottom, 0, bottom);

  @include frame-when-nav-displayed {
    .hasNav & {
      padding-left: layout-width(nav);
      @include when-printing {
        padding-left: 0;
      }
      @include safe-area-for(padding-left, layout-width(nav), left);
    }
  }

  .hasTopBar & {
    padding-top: top-bar-height();
    @include when-printing {
      padding-top: 0;
    }
  }
}

.Main-newDesignLanguage {
  .hasTopBar & {
    padding-top: new-top-bar-height();
    @include when-printing {
      padding-top: 0;
    }
  }
  @include frame-when-nav-displayed {
    .hasNav & {
      padding-left: layout-width(new-nav);
      @include safe-area-for(padding-left, layout-width(new-nav), left);

      @include when-printing {
        padding-left: 0;
      }
    }
  }
}

.Content {
  padding-bottom: var(--global-ribbon-height, 0);
  flex: 1;
  @include layout-flex-fix;
}

.GlobalRibbonContainer {
  position: fixed;
  z-index: z-index(global-ribbon, $fixed-element-stacking-order);
  bottom: 0;
  width: 100%;

  @include frame-when-nav-displayed {
    left: var(--p-frame-offset);

    .hasNav & {
      left: calc(#{layout-width(nav)} + var(--p-frame-offset));
      @include safe-area-for(
        left,
        calc(#{layout-width(nav)} + var(--p-frame-offset)),
        left
      );
      width: calc(100% - #{layout-width(nav)} - var(--p-frame-offset));
    }
  }
}

.GlobalRibbonContainer-newDesignLanguage {
  @include frame-when-nav-displayed {
    .hasNav & {
      left: calc(#{layout-width(new-nav)} + var(--p-frame-offset));
      @include safe-area-for(
        left,
        calc(#{layout-width(new-nav)} + var(--p-frame-offset)),
        left
      );
      width: calc(100% - #{layout-width(new-nav)} - var(--p-frame-offset));
    }
  }
}

.LoadingBar {
  @include hidden-when-printing;
  position: fixed;
  z-index: z-index(small-screen-loading-bar, $fixed-element-stacking-order);
  top: 0;
  right: 0;
  left: 0;

  @include frame-when-nav-displayed {
    .hasNav & {
      left: var(--p-frame-offset);
    }

    .hasTopBar & {
      top: var(--p-override-zero, top-bar-height());
      z-index: var(
        --p-override-loading-z-index,
        z-index(loading-bar, $fixed-element-stacking-order)
      );
    }
  }
}

.Skip {
  position: fixed;
  z-index: z-index(skip-to-content, $fixed-element-stacking-order);
  top: $skip-vertical-offset;
  left: calc(#{spacing(tight)} + var(--p-frame-offset));
  opacity: 0;
  pointer-events: none;

  &.focused {
    pointer-events: all;
    opacity: 1;
  }
}

.SkipAnchor {
  @include button-base;
}
