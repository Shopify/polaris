@import '../../styles/common';

$stacking-order: (
  backdrop: 10,
  content: 20,
  input: 30,
);

.Select {
  position: relative;

  // IE 11 fix to remove default dropdown arrow
  select::-ms-expand {
    display: none;
  }
}

.disabled {
  .Content {
    color: var(--p-text-disabled);
  }

  .InlineLabel {
    color: inherit;
  }

  .Icon {
    @include recolor-icon(var(--p-icon-disabled));
  }

  .Backdrop {
    border-color: var(--p-border-disabled);

    &::before {
      background-color: var(--p-action-secondary-disabled);
    }

    &:hover {
      cursor: default;
    }
  }
}

.placeholder {
  // stylelint-disable-next-line selector-max-class
  &.error .Input {
    // This is the only place this color is used.
    // stylelint-disable-next-line color-no-hex
    color: #9c9798;
  }

  // stylelint-disable-next-line selector-max-class, selector-max-specificity
  &.error .Input:-moz-focusring {
    color: transparent;
    text-shadow: var(--p-override-none);
  }
}

.Content {
  @include text-style-input;
  position: relative;
  z-index: z-index(content, $stacking-order);
  display: flex;
  align-items: center;
  width: 100%;
  min-height: control-height();
  padding: control-vertical-padding() spacing(tight) control-vertical-padding()
    spacing(base-tight);
}

.InlineLabel {
  @include text-emphasis-subdued;
  margin-right: rem(4px);
  white-space: nowrap;
  overflow: hidden;
}

.SelectedOption {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.Prefix {
  padding-right: spacing('tight');
}

.Icon {
  @include recolor-icon(var(--p-icon));
}

.Input {
  // Even though the input is invisible, text styles apply to the options menu
  @include text-style-input;
  position: absolute;
  // Required to solve a bug causing Safari 13 to crash https://bugs.webkit.org/show_bug.cgi?id=202055
  text-rendering: auto;
  top: 0;
  left: 0;
  z-index: z-index(input, $stacking-order);
  width: 100%;
  height: 100%;
  margin: 0;
  // ChromeVox may hide content set to opacity: 0
  opacity: 0.001;
  appearance: none;
}

.Backdrop {
  z-index: z-index(backdrop, $stacking-order);
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  border: border-width() solid var(--p-border-subdued);
  border-bottom-color: var(--p-border-shadow-subdued);
  border-radius: var(--p-border-radius-base);
  background-color: var(--p-surface);
  box-shadow: var(--p-button-drop-shadow);
  @include focus-ring($border-width: rem(1px));
  // 'position' needs to sit below focus-ring since it will be overwritten
  // with relative when the focus ring style is 'base'
  // stylelint-disable-next-line order/properties-order
  position: absolute;
}

.error {
  .Backdrop {
    border-color: var(--p-border-critical);
    background-color: var(--p-surface-critical);
    // stylelint-disable-next-line selector-max-class, selector-max-specificity
    &.hover,
    &:hover {
      border-color: var(--p-border-critical);
    }
  }

  // Need to override the higher specificity of the sibling selector
  // so that errors still have red borders.
  // stylelint-disable-next-line selector-max-combinators, selector-max-specificity, selector-max-class
  .Input:focus ~ .Backdrop {
    @include focus-ring($style: 'focused');
  }
}

.Input:focus {
  ~ .Backdrop {
    @include focus-ring($style: 'focused');
  }
}

@media (-ms-high-contrast: active) {
  .Content {
    color: ms-high-contrast-color('text');
    -ms-high-contrast-adjust: none;
  }

  .InlineLabel {
    color: inherit;

    &::after {
      content: ':';
    }
  }

  .SelectedOption {
    color: inherit;
  }

  .Icon {
    @include recolor-icon(ms-high-contrast-color('button-text'));
  }

  .Backdrop {
    &::after {
      // Remove the dotted focus outline from the control-backdrop mixin.
      display: none;
    }
  }

  .Input:focus {
    ~ .Content {
      color: ms-high-contrast-color('selected-text');
    }

    ~ .Backdrop {
      // Align with the native styling for this element, which differs from
      // what the control-backdrop mixin provides.
      background-color: ms-high-contrast-color('selected-text-background');
    }
  }

  .disabled {
    .Content {
      color: ms-high-contrast-color('disabled-text');
    }

    .Icon {
      @include recolor-icon(ms-high-contrast-color('disabled-text'));
      opacity: 1;
    }
  }
}
