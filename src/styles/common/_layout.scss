$navigation-width: 240px !default;

////
/// Layout
/// @group foundation/layout
////

// TODO: pull data from sizes tokens
$layout-width-data: (
  primary: (
    min: rem(480px),
    max: rem(662px),
  ),
  secondary: (
    min: rem(240px),
    max: rem(320px),
  ),
  one-half-width: (
    base: rem(450px),
  ),
  one-third-width: (
    base: rem(240px),
  ),
  nav: (
    base: rem($navigation-width),
  ),
  page-with-nav: (
    base: rem(769px),
  ),
  page-content: (
    not-condensed: rem(680px),
    partially-condensed: rem(450px),
  ),
  inner-spacing: (
    base: spacing(),
  ),
  outer-spacing: (
    min: spacing(loose),
    max: spacing(extra-loose),
  ),
);

/// Returns the widths of the specified column.
/// @param {String} $name - The column name.
/// @return {Number} The width for the column.

@function layout-width($name, $value: base) {
  $fetched-value: map-get(map-get($layout-width-data, $name), $value);

  @if type-of($fetched-value) != null {
    @return $fetched-value;
  } @else {
    @error 'Column `#{$name} - #{$value}` not found. Available columns: #{available-names($layout-width-data)}';
  }
}

$dismiss-icon-size: 32px;

@function top-bar-height() {
  @return rem(56px);
}

@function mobile-nav-width() {
  @return calc(100vw - #{rem($dismiss-icon-size) + spacing() * 2});
}

@function nav-min-window-corrected() {
  @return rem(769px);
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/

@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}

/// Returns a safe-area-inset for iPhone X screen obtrusions.
///
/// @param {String} $property - The property name i.e. padding-left.
/// @param {Space} $spacing - The spacing value to be added to the safe-area
/// value. i.e. spacing().
/// @param {string} $area - The area where the inset is to be added. i.e. left
///
/// If overriding an existing padding / margin that value should be used as
/// $spacing.
@mixin safe-area-for($property, $spacing, $area) {
  $spacing: if($spacing == 0, #{$spacing}px, $spacing);
  #{$property}: #{$spacing};
  #{$property}: calc(#{$spacing} + constant(safe-area-inset-#{$area}));
  #{$property}: calc(#{$spacing} + env(safe-area-inset-#{$area}));
}

@mixin after-topbar-sheet {
  @include breakpoint-after(450px) {
    @content;
  }
}
