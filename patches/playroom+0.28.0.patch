diff --git a/node_modules/playroom/README.md b/node_modules/playroom/README.md
index 6c82bbe..f05b80b 100644
--- a/node_modules/playroom/README.md
+++ b/node_modules/playroom/README.md
@@ -160,6 +160,12 @@ export { themeB } from './themeB';
 // etc...
 ```
 
+## Additional Code Transformations
+
+A hook into the internal processing of code is available via the `processCode` option, which is a path to a file that exports a function that receives the code as entered into the editor, and returns the new code to be rendered.
+
+One example is [wrapping code in an IIFE for state support](https://github.com/seek-oss/playroom/issues/66).
+
 ## TypeScript Support
 
 If a `tsconfig.json` file is present in your project, static prop types are parsed using [react-docgen-typescript](https://github.com/styleguidist/react-docgen-typescript) to provide better autocompletion in the Playroom editor.
diff --git a/node_modules/playroom/lib/defaultModules/processCode.js b/node_modules/playroom/lib/defaultModules/processCode.js
new file mode 100644
index 0000000..36a436c
--- /dev/null
+++ b/node_modules/playroom/lib/defaultModules/processCode.js
@@ -0,0 +1 @@
+export default code => code;
diff --git a/node_modules/playroom/lib/makeWebpackConfig.js b/node_modules/playroom/lib/makeWebpackConfig.js
index 56defa7..1e7cf3b 100644
--- a/node_modules/playroom/lib/makeWebpackConfig.js
+++ b/node_modules/playroom/lib/makeWebpackConfig.js
@@ -54,6 +54,9 @@ module.exports = async (playroomConfig, options) => {
         __PLAYROOM_ALIAS__USE_SCOPE__: playroomConfig.scope
           ? relativeResolve(playroomConfig.scope)
           : require.resolve('./defaultModules/useScope'),
+        __PLAYROOM_ALIAS__PROCESS_CODE__: playroomConfig.processCode
+          ? relativeResolve(playroomConfig.processCode)
+          : require.resolve('./defaultModules/processCode'),
       },
     },
     module: {
diff --git a/node_modules/playroom/src/utils/compileJsx.ts b/node_modules/playroom/src/utils/compileJsx.ts
index dadea77..82d080c 100644
--- a/node_modules/playroom/src/utils/compileJsx.ts
+++ b/node_modules/playroom/src/utils/compileJsx.ts
@@ -1,9 +1,18 @@
 import { transform } from '@babel/standalone';
+/* eslint-disable-next-line import/no-unresolved */
+import processCode from '__PLAYROOM_ALIAS__PROCESS_CODE__';
 
-export const compileJsx = (code: string) =>
-  transform(`<React.Fragment>${code.trim() || ''}</React.Fragment>`, {
+export const compileJsx = (code: string) => {
+  const processedCode = processCode(code);
+
+  if (typeof processedCode !== 'string') {
+    throw new Error('processCode function must return a string of code.');
+  }
+
+  return transform(`<React.Fragment>${processedCode.trim()}</React.Fragment>`, {
     presets: ['react'],
   }).code;
+}
 
 export const validateCode = (code: string) => {
   try {
diff --git a/node_modules/playroom/src/utils/formatting.ts b/node_modules/playroom/src/utils/formatting.ts
index a1819bf..70ac15c 100644
--- a/node_modules/playroom/src/utils/formatting.ts
+++ b/node_modules/playroom/src/utils/formatting.ts
@@ -133,10 +133,10 @@ export const formatAndInsert = ({
     snippet,
   });
 
-  return formatCode({
+  return {
     code: newCode,
     cursor: updatedCursor,
-  });
+  };
 };
 
 export const formatForInsertion = ({
