diff --git a/node_modules/playroom/README.md b/node_modules/playroom/README.md
index 6c82bbe..f05b80b 100644
--- a/node_modules/playroom/README.md
+++ b/node_modules/playroom/README.md
@@ -160,6 +160,12 @@ export { themeB } from './themeB';
 // etc...
 ```
 
+## Additional Code Transformations
+
+A hook into the internal processing of code is available via the `processCode` option, which is a path to a file that exports a function that receives the code as entered into the editor, and returns the new code to be rendered.
+
+One example is [wrapping code in an IIFE for state support](https://github.com/seek-oss/playroom/issues/66).
+
 ## TypeScript Support
 
 If a `tsconfig.json` file is present in your project, static prop types are parsed using [react-docgen-typescript](https://github.com/styleguidist/react-docgen-typescript) to provide better autocompletion in the Playroom editor.
diff --git a/node_modules/playroom/lib/defaultModules/processCode.js b/node_modules/playroom/lib/defaultModules/processCode.js
new file mode 100644
index 0000000..36a436c
--- /dev/null
+++ b/node_modules/playroom/lib/defaultModules/processCode.js
@@ -0,0 +1 @@
+export default code => code;
diff --git a/node_modules/playroom/lib/makeWebpackConfig.js b/node_modules/playroom/lib/makeWebpackConfig.js
index 56defa7..1e7cf3b 100644
--- a/node_modules/playroom/lib/makeWebpackConfig.js
+++ b/node_modules/playroom/lib/makeWebpackConfig.js
@@ -54,6 +54,9 @@ module.exports = async (playroomConfig, options) => {
         __PLAYROOM_ALIAS__USE_SCOPE__: playroomConfig.scope
           ? relativeResolve(playroomConfig.scope)
           : require.resolve('./defaultModules/useScope'),
+        __PLAYROOM_ALIAS__PROCESS_CODE__: playroomConfig.processCode
+          ? relativeResolve(playroomConfig.processCode)
+          : require.resolve('./defaultModules/processCode'),
       },
     },
     module: {
diff --git a/node_modules/playroom/src/Playroom/Frame.tsx b/node_modules/playroom/src/Playroom/Frame.tsx
index b175d74..ce3e7ef 100644
--- a/node_modules/playroom/src/Playroom/Frame.tsx
+++ b/node_modules/playroom/src/Playroom/Frame.tsx
@@ -1,9 +1,9 @@
-import React from 'react';
-import { useParams } from '../utils/params';
+import React, { useEffect, useState } from 'react';
 // @ts-ignore
 import CatchErrors from './CatchErrors/CatchErrors';
 // @ts-ignore
 import RenderCode from './RenderCode/RenderCode';
+import { INCOMING_CODE, READY_TO_RECEIVE } from './constants';
 
 interface FrameProps {
   themes: Record<string, any>;
@@ -18,11 +18,21 @@ export default function Frame({
   components,
   FrameComponent,
 }: FrameProps) {
-  const { themeName, code } = useParams((rawParams) => ({
-    themeName:
-      typeof rawParams.themeName === 'string' ? rawParams.themeName : '',
-    code: typeof rawParams.code === 'string' ? rawParams.code : '',
-  }));
+  const [code, setCode] = useState(`/*#__PURE__*/
+  React.createElement(React.Fragment, null);`);
+  const [themeName, setThemeName] = useState('');
+  useEffect(() => {
+    const listener = (e: any) => {
+      if (e.data && e.data.type === INCOMING_CODE ) {
+        setCode(e.data.code);
+        setThemeName(e.data.themeName);
+      };
+
+    }
+    window.addEventListener('message', listener);
+    window.parent.postMessage({ type: READY_TO_RECEIVE, ready: true }, window.origin);
+    return () => window.removeEventListener('message', listener);
+  }, []);
 
   const resolvedThemeName =
     themeName === '__PLAYROOM__NO_THEME__' ? null : themeName;
diff --git a/node_modules/playroom/src/Playroom/Frames/Frames.tsx b/node_modules/playroom/src/Playroom/Frames/Frames.tsx
index 5b4af43..3bb2615 100644
--- a/node_modules/playroom/src/Playroom/Frames/Frames.tsx
+++ b/node_modules/playroom/src/Playroom/Frames/Frames.tsx
@@ -6,7 +6,6 @@ import { PlayroomProps } from '../Playroom';
 import { Strong } from '../Strong/Strong';
 import { Text } from '../Text/Text';
 import playroomConfig from '../../config';
-import frameSrc from './frameSrc';
 
 import * as styles from './Frames.css';
 
@@ -44,10 +43,9 @@ export default function Frames({ code, themes, widths }: FramesProps) {
             <div className={styles.frameBorder} />
             <Iframe
               intersectionRootRef={scrollingPanelRef}
-              src={frameSrc(
-                { themeName: frame.theme, code: renderCode },
-                playroomConfig
-              )}
+              code={renderCode}
+              themeName={frame.theme}
+              src={`${playroomConfig.baseUrl}frame.html`}
               className={styles.frame}
               style={{ width: frame.width }}
               data-testid="previewFrame"
diff --git a/node_modules/playroom/src/Playroom/Frames/Iframe.tsx b/node_modules/playroom/src/Playroom/Frames/Iframe.tsx
index 9285b94..c268bdb 100644
--- a/node_modules/playroom/src/Playroom/Frames/Iframe.tsx
+++ b/node_modules/playroom/src/Playroom/Frames/Iframe.tsx
@@ -6,22 +6,29 @@ import React, {
   MutableRefObject,
 } from 'react';
 import { useIntersection } from 'react-use';
+import { READY_TO_RECEIVE, INCOMING_CODE } from '../constants';
 
 import playroomConfig from '../../config';
 
 interface IframeProps extends AllHTMLAttributes<HTMLIFrameElement> {
   src: string;
+  code: string;
+  themeName: string;
   intersectionRootRef: MutableRefObject<Element | null>;
 }
 
+
 export default function Iframe({
   intersectionRootRef,
+  code,
+  themeName,
   style,
   src,
   ...restProps
 }: IframeProps) {
   const [loaded, setLoaded] = useState(false);
-  const [renderedSrc, setRenderedSrc] = useState<string | null>(null);
+  const [renderedSrc, setRenderedSrc] = useState<string | undefined>(undefined);
+  const [readyToPost, setReadyToPost] = useState(false);
   const iframeRef = useRef<HTMLIFrameElement | null>(null);
   const intersection = useIntersection(iframeRef, {
     root: intersectionRootRef.current,
@@ -32,35 +39,41 @@ export default function Iframe({
   const intersectionRatio = intersection?.intersectionRatio ?? null;
 
   useEffect(() => {
-    if (intersectionRatio === null) {
-      return;
+    if (intersectionRatio === null) return;
+    const listener = (e: any) => {
+      if (e.data.type === READY_TO_RECEIVE && e.source === iframeRef.current?.contentWindow) {
+        setReadyToPost(true);
+        const contentWindow = iframeRef.current?.contentWindow;
+        if (contentWindow) {
+          contentWindow.postMessage({ type: INCOMING_CODE,  themeName, code }, window.origin);
+        }
+      }
     }
+    window.addEventListener('message', listener);
 
     if (intersectionRatio > 0 && src !== renderedSrc) {
       setRenderedSrc(src);
     }
+    return () => window.removeEventListener('message', listener);
   }, [intersectionRatio, src, renderedSrc]);
 
   useEffect(() => {
-    if (renderedSrc !== null) {
-      const location = iframeRef.current?.contentWindow?.location;
-
-      if (location) {
-        location.replace(renderedSrc);
+    if (readyToPost) {
+      const contentWindow = iframeRef.current?.contentWindow;
+      if (contentWindow) {
+        contentWindow.postMessage({ type: INCOMING_CODE,  themeName, code }, window.origin);
       }
     }
-  }, [renderedSrc]);
+  }, [readyToPost, code])
+
+
 
   return (
     <iframe
       ref={iframeRef}
       sandbox={playroomConfig.iframeSandbox}
       onLoad={() => setLoaded(true)}
-      onMouseEnter={() => {
-        if (src !== renderedSrc) {
-          setRenderedSrc(src);
-        }
-      }}
+      src={renderedSrc}
       style={{
         ...style,
         transition: 'opacity .3s ease',
diff --git a/node_modules/playroom/src/Playroom/constants.ts b/node_modules/playroom/src/Playroom/constants.ts
new file mode 100644
index 0000000..90c35d0
--- /dev/null
+++ b/node_modules/playroom/src/Playroom/constants.ts
@@ -0,0 +1,2 @@
+export const READY_TO_RECEIVE = "PLAYROOM_READY_TO_RECEIVE";
+export const INCOMING_CODE = "PLAYROOM_INCOMING_CODE";
diff --git a/node_modules/playroom/src/utils/compileJsx.ts b/node_modules/playroom/src/utils/compileJsx.ts
index dadea77..82d080c 100644
--- a/node_modules/playroom/src/utils/compileJsx.ts
+++ b/node_modules/playroom/src/utils/compileJsx.ts
@@ -1,9 +1,18 @@
 import { transform } from '@babel/standalone';
+/* eslint-disable-next-line import/no-unresolved */
+import processCode from '__PLAYROOM_ALIAS__PROCESS_CODE__';
 
-export const compileJsx = (code: string) =>
-  transform(`<React.Fragment>${code.trim() || ''}</React.Fragment>`, {
+export const compileJsx = (code: string) => {
+  const processedCode = processCode(code);
+
+  if (typeof processedCode !== 'string') {
+    throw new Error('processCode function must return a string of code.');
+  }
+
+  return transform(`<React.Fragment>${processedCode.trim()}</React.Fragment>`, {
     presets: ['react'],
   }).code;
+}
 
 export const validateCode = (code: string) => {
   try {
diff --git a/node_modules/playroom/src/utils/formatting.ts b/node_modules/playroom/src/utils/formatting.ts
index a1819bf..70ac15c 100644
--- a/node_modules/playroom/src/utils/formatting.ts
+++ b/node_modules/playroom/src/utils/formatting.ts
@@ -133,10 +133,10 @@ export const formatAndInsert = ({
     snippet,
   });
 
-  return formatCode({
+  return {
     code: newCode,
     cursor: updatedCursor,
-  });
+  };
 };
 
 export const formatForInsertion = ({
