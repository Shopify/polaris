/* eslint-disable no-console */
import {lint} from 'stylelint';

import {tokens} from '../src/tokens/tokens';

/**
 * Important: All elements will be converted to regex by the custom-property-pattern rule.
 *
 * Note: We recommend using String.raw`...` instead of double escaping regex patterns.
 * e.g. String.raw`\.css` instead of '\\.css'
 *
 * Notice: We don't allow `--p-` custom properties because they auto generated by our
 * tooling and should never be initialized in CSS rules.
 */
const allowedCustomProperties = ['polaris-version-number', '^pc-.+'];

function createPolarisTokens(tokens: any) {
  return Object.keys(tokens).map((token) => `--p-${token}`);
}

const polarisTokens = Array.from(
  new Set(
    Object.entries(tokens)
      .map(([tokenGroup, tokens]) => {
        if (tokenGroup === 'colorSchemes') {
          return Object.values(tokens).map(createPolarisTokens);
        } else {
          return createPolarisTokens(tokens);
        }
      })
      .flat(Infinity),
  ),
);

const allowedCustomPropertyValues = [...polarisTokens, '--pc-.+'];

// console.log(
//   String.raw`/(?<=var\()(${allowedCustomPropertyValues.join('\\)|')})/`,
// );

const rules = {
  'custom-property-pattern': String.raw`(${allowedCustomProperties.join('|')})`,
  'plugin/check-custom-properties': {
    props: ['/--pc-.+/', ...polarisTokens],
  },
  // 'declaration-property-value-allowed-list': {
  //   '/.+/': [
  //     String.raw`/(?<=var\()(${allowedCustomPropertyValues.join('\\)|')})/`,
  //   ],
  // },
};

lint({
  configBasedir: __dirname,
  config: {
    plugins: ['./check-custom-vars.ts'],
    rules,
  },
  // files: '**/*.scss',
  files: '**/TextContainer.scss',
  // files: '**/SkeletonThumbnail.scss',
  customSyntax: 'postcss-scss',
})
  .then((data) => {
    const failures = data.results.map((result) => ({
      path: result.source,
      errors: result.warnings.map((warning) => ({
        rule: warning.rule,
        line: warning.line,
        text: warning.text,
      })),
    }));

    console.log(JSON.stringify(failures, null, 2));

    console.log(
      'Total errors: ',
      failures.map((failure) => failure.errors).flat().length,
    );

    console.log('\n');
  })
  .catch((err) => {
    console.error(err.stack);
  });
