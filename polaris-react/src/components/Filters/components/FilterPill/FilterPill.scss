@import '../../../../styles/common';

.FilterButton {
  background: var(--p-color-bg-subdued);
  border-radius: var(--p-border-radius-750);
  border: var(--p-color-border-subdued) dashed var(--p-border-width-025);
  cursor: pointer;
  color: var(--p-color-text);

  // stylelint-disable-next-line -- no way to set focus ring without mixin currently
  @include focus-ring($border-width: var(--p-border-width-025));
  // stylelint-disable-next-line selector-max-specificity -- specificity is required to override focus-ring mixin
  &.focusedFilterButton:focus-within:not(:active) {
    // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
    @include focus-ring($style: focused);
  }

  &:hover,
  &:focus,
  &:active {
    background: var(--p-color-bg-hover);
    border-color: var(--p-color-border);

    path {
      fill: var(--p-color-icon-hover);
    }
  }

  &.disabledFilterButton {
    background: var(--p-color-bg-disabled);
    border-color: var(--p-color-border-disabled);
    color: var(--p-color-text-disabled);
    cursor: default;
  }

  &.ActiveFilterButton {
    background: var(--p-color-bg);
    border-style: solid;
  }

  &::after {
    border-radius: var(--p-border-radius-750);
  }

  #{$se23} & {
    background: var(--p-color-bg-secondary-experimental);
    border-radius: var(--p-border-radius-200);
    border: var(--p-color-border) dashed var(--p-border-width-025);

    &:hover,
    &:active {
      border-style: solid;
    }

    &:hover,
    &:focus {
      background: transparent;
    }

    &:active {
      background: var(--p-color-bg-subdued);

      #{$se23} & {
        background: var(--p-color-bg-secondary-experimental);
      }
    }

    &.disabledFilterButton {
      background: var(--p-color-bg-disabled);
      border-color: var(--p-color-border-disabled);
      color: var(--p-color-text-disabled);
      cursor: default;
    }

    &.ActiveFilterButton {
      background: var(--p-color-bg);
      border-style: solid;

      &:active {
        background: var(--p-color-bg-subdued);

        #{$se23} & {
          background: var(--p-color-bg-secondary-experimental);
        }
      }
    }

    &::after {
      border-radius: var(--p-border-radius-200);
    }
  }
}

.PlainButton {
  background: none;
  color: inherit;
  border: none;
  padding: 0;
  font: inherit;
  cursor: inherit;
  outline: inherit;

  path {
    fill: var(--p-color-icon);
  }

  &[aria-disabled='true'] {
    path {
      fill: var(--p-color-icon-disabled);
    }
  }
}

.ToggleButton {
  padding: 0 var(--p-space-200) 0 var(--p-space-300);
  height: 26px;

  @media #{$p-breakpoints-md-up} {
    padding: 0 var(--p-space-100) 0 var(--p-space-200);
    height: 22px;
  }

  .Label {
    display: flex;
    padding-left: var(--p-space-050);
  }
}

.ActiveFilterButton .ToggleButton {
  padding-right: var(--p-space-050);
  @media #{$p-breakpoints-md-up} {
    padding-right: 0;
  }
}

.clearButton {
  // stylelint-disable-next-line -- no way to set focus ring without mixin currently
  @include focus-ring;
  margin-right: var(--p-space-200);

  @media #{$p-breakpoints-md-up} {
    margin-right: var(--p-space-100);
  }

  &:focus-visible:not(:active) {
    // stylelint-disable-next-line -- no way to set focus ring without mixin currently
    @include focus-ring($style: focused);
  }
}

.IconWrapper {
  @media #{$p-breakpoints-md-up} {
    scale: 0.8;
  }
}

.PopoverWrapper {
  min-width: 185px;
  max-width: 300px;
  word-break: break-word;
}

.ClearButtonWrapper {
  #{$se23} & button {
    min-height: 0;
    padding: 0;
    margin: 0;
  }
}
