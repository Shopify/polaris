@import '../../styles/common';
@import '../ResourceList/variables';

.CheckableButton {
  color: var(--p-color-text);
  font-size: var(--p-font-size-75);
  font-weight: var(--p-font-weight-medium);
  line-height: var(--p-font-line-height-1);
  letter-spacing: initial;
  display: flex;
  align-items: center;
  min-height: 36px;
  min-width: 36px;
  margin: 0;
  cursor: pointer;
  user-select: none;
  text-decoration: none;
  text-align: left;
  border-radius: var(--p-border-radius-1);
  width: auto;

  #{$se23} & {
    // Checkable Button has no opinion on its own height, it simply fills its
    // container
    min-height: auto;
    min-width: auto;
    height: 100%;
  }

  svg {
    fill: var(--p-color-icon-on-color);
  }

  &:hover,
  &:active {
    background: transparent;
  }

  &:focus {
    outline: none;
  }
}

.Checkbox {
  pointer-events: none;

  /*
      We do not want to worry about setting the height and width explicitly.
      We want to inherits the height and width of its child (in this case the Checkbox component).

      We do this using flexbox because "the cross size of each flex container is the minimum size necessary to contain the flex items" as per the spec.
      https://www.w3.org/TR/css-flexbox-1/#flex-lines
  */
  display: flex;
}

.Label {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  max-width: 100%;
  text-overflow: ellipsis;
  // padding to fix the bottom of letters being cutoff by overflow: hidden
  padding: var(--p-space-025) 0;
  margin-left: calc(var(--p-space-5) - var(--p-border-width-2));

  #{$se23} & {
    margin-left: calc(var(--p-space-3) + var(--p-space-025));
    // stylelint-disable-next-line polaris/typography/declaration-property-unit-disallowed-list -- se23
    line-height: 18px;
  }
}
