.TextField {
  /* stylelint-disable -- Polaris component custom properties */
  --pc-text-field-contents: 20;
  --pc-text-field-backdrop: 10;
  /* stylelint-enable */
  /* stylelint-disable-next-line -- polaris-migrator DO NOT COPY */
  @mixin text-style-input;
  position: relative;
  display: flex;
  align-items: center;
  color: var(--p-color-text);
  cursor: text;

  svg {
    fill: var(--p-color-icon-secondary);
  }

  /* only show the clear button when focused within the textfield */
  &:focus-within {
    .ClearButton {
      display: block;
      visibility: visible;
      opacity: 1;
    }

    /* stylelint-disable-next-line -- needed to remove extra margin between loading indicator and clear button when visible */
    .Loading:has(+ .ClearButton) {
      margin-right: 0;
    }
  }

  &:not(:focus-within) {
    .ClearButton {
      display: none;
      visibility: hidden;
      opacity: 0;
    }
  }

  /* stylelint-disable-next-line selector-max-specificity -- set Backdrop styles */
  &:not(.disabled):not(.error):not(.readOnly)
    > .Input:hover:not(:focus-visible) {
    /* stylelint-disable-next-line -- set Backdrop styles */
    ~ .Backdrop {
      border-color: var(--p-color-input-border-hover);
      background-color: var(--p-color-input-bg-surface-hover);
    }
  }
}

.multiline {
  padding: 0;
  flex-wrap: wrap;

  > .Input {
    overflow: auto;
    padding-left: var(--p-space-300);
    padding-right: var(--p-space-300);
    resize: none;
  }
}

.hasValue {
  color: var(--p-color-text);
}

.focus > .Input,
.focus > .VerticalContent,
.focus > .InputAndSuffixWrapper,
.TextField:focus-within > .Input,
.Input:focus-visible {
  outline: none;

  /* stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity -- outline based on child focus requires complex specificity */
  ~ .Backdrop {
    border-color: var(--p-color-input-border-active);
    border-width: var(--p-border-width-025);
    background-color: var(--p-color-input-bg-surface-active);

    /* stylelint-disable-next-line -- remove focus ring mixin */
    @mixin no-focus-ring;
    outline: var(--p-border-width-050) solid var(--p-color-border-focus);
    outline-offset: var(--p-space-025);
  }
}

.error {
  /* stylelint-disable-next-line -- set Backdrop styles */
  .Input:hover ~ .Backdrop,
  .Input:focus-visible ~ .Backdrop {
    border-color: var(--p-color-border-critical-secondary);
    background-color: var(--p-color-bg-surface-critical);
  }

  /* stylelint-disable-next-line -- set Backdrop styles */
  .Input:active ~ .Backdrop,
  .Input:focus-visible ~ .Backdrop {
    border-width: var(--p-border-width-025);
  }

  /* stylelint-disable-next-line selector-max-class, selector-max-combinators -- generated by polaris-migrator DO NOT COPY */
  > .Input ~ .Backdrop,
  > .InputAndSuffixWrapper ~ .Backdrop {
    background-color: var(--p-color-bg-surface-critical);
    border-color: var(--p-color-border-critical-secondary);

    /* stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity -- generated by polaris-migrator DO NOT COPY */
    &::after {
      border-color: var(--p-color-border-focus);
    }
  }
}

/* stylelint-disable -- specificity bump for readOnly styles to override */
.readOnly.readOnly {
  > .Input {
    color: var(--p-color-text-secondary);
  }

  > .Backdrop {
    background-color: var(--p-color-bg-surface-disabled);
    border-color: transparent;
  }

  &.focus {
    > .Backdrop {
      background-color: var(--p-color-bg-surface-disabled);
      border-color: transparent;
    }
  }
}
/* stylelint-enable */

/* stylelint-disable selector-max-specificity, selector-max-class, selector-max-combinators -- specificity bump for magic styles to override */
.toneMagic {
  .Prefix,
  .Suffix {
    color: var(--p-color-text-magic-secondary);
  }

  > .Input {
    color: var(--p-color-text-magic);
  }

  > .Backdrop {
    background-color: var(--p-color-bg-surface-magic);
    border-color: var(--p-color-border-magic-secondary);
  }

  svg {
    fill: var(--p-color-icon-magic);
  }

  &:not(.disabled):not(.error):not(.readOnly)
    > .Input:hover:not(:focus-visible) {
    ~ .Backdrop {
      background-color: var(--p-color-bg-surface-magic-hover);
      border-color: var(--p-color-border-magic-secondary-hover);
    }
  }

  &.focus > .Input,
  &.focus > .VerticalContent,
  &.TextField:focus-within > .Input,
  &.Input:focus-visible {
    color: var(--p-color-text);
  }

  &.focus {
    .Prefix,
    .Suffix {
      color: var(--p-color-text-secondary);
    }

    svg {
      fill: var(--p-color-icon-secondary);
    }
  }
}
/* stylelint-enable */

.disabled {
  color: var(--p-color-text-disabled);
  cursor: initial;

  > .Backdrop {
    border: none;
    background-color: var(--p-color-bg-surface-disabled);
  }

  svg {
    fill: var(--p-color-icon-disabled);
  }
}

.InputAndSuffixWrapper {
  display: flex;
  align-items: center;
  flex: 1 1 0%;
  width: 100%;
}

.AutoSizeWrapper {
  position: relative;
  display: inline-grid;
  align-items: center;

  &::after {
    content: attr(data-auto-size-value);
    visibility: hidden;
    white-space: pre-wrap;

    /* needed to ensure the textfield doesn't grow in height when the text field content overgrows the available space */
    /* stylelint-disable-next-line -- polaris custom global property */
    max-height: var(--pg-control-height);
  }

  &::after,
  input,
  textarea {
    width: auto;
    min-width: 1em;
    grid-area: 1 / 2;
    padding: 0 var(--p-space-300);
    font-size: var(--p-font-size-400);
    font-weight: var(--p-font-weight-regular);
    line-height: var(--p-font-line-height-600);

    @media (--p-breakpoints-md-up) {
      font-size: var(--p-font-size-325);
      line-height: var(--p-font-line-height-500);
    }
  }
}

.Prefix + .InputAndSuffixWrapper {
  /* stylelint-disable-next-line selector-max-combinators, selector-max-class, selector-max-specificity -- necessary to remove padding when autosizing and with prefix */
  .AutoSizeWrapper::after,
  input,
  textarea {
    padding-left: 0;
  }
}

.AutoSizeWrapperWithSuffix {
  &::after,
  input,
  textarea {
    padding-right: 0;
  }
}

.Input {
  font-size: var(--p-font-size-400);
  font-weight: var(--p-font-weight-regular);
  line-height: var(--p-font-line-height-600);
  letter-spacing: initial;
  position: relative;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  display: flex;
  flex: 1 1 0%;
  width: 100%;
  min-width: 0;
  /* stylelint-disable-next-line -- polaris custom global property */
  min-height: var(--pg-control-height);
  padding: var(--p-space-150) var(--p-space-300);
  background: none;
  border: none;
  font-family: var(--p-font-family-sans);
  appearance: none;
  caret-color: var(--p-color-text);
  color: var(--p-color-text);
  align-items: center;

  @media (--p-breakpoints-md-up) {
    font-size: var(--p-font-size-325);
    line-height: var(--p-font-line-height-500);
  }

  .Prefix + & {
    padding-left: 0;
  }

  &:disabled {
    opacity: 1;
    background: none;
    color: var(--p-color-text-disabled);
    -webkit-text-fill-color: var(--p-color-text-disabled);
  }

  /* remove the box shadow in Firefox when the input is invalid */
  &:invalid {
    box-shadow: none;
  }

  &::placeholder {
    color: var(--p-color-text-secondary);
  }

  /* These properties are used to remove the default "spinner" controls
     for number fields, since we add our own, custom versions instead. */
  &[type='number'] {
    appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      appearance: none;
      margin: 0;
    }
  }

  &:-webkit-autofill {
    border-radius: var(--p-border-radius-100);
  }

  &.suggestion {
    &::selection {
      color: var(--p-color-text-disabled);
      background: transparent;
    }
  }
}

.borderless {
  .Input,
  .Backdrop {
    border: none;
    min-height: var(--p-space-800);
  }
}

.slim {
  .Input,
  .Backdrop {
    min-height: 28px;
    padding-block: var(--p-space-050);
  }
}

/* stylelint-disable -- override focus ring offset by increasing specificity */
.slim.borderless.slim.borderless {
  .Input,
  .Backdrop {
    outline-offset: 0;
  }
}
/* stylelint-enable */

.Input-hasClearButton {
  /* Hide webkit search input clear button */
  &[type='search'] {
    &::-webkit-search-cancel-button {
      appearance: none;
    }
  }
}

.Input-suffixed {
  padding-right: 0;
}

.Input-alignRight {
  text-align: right;
}

.Input-alignLeft {
  text-align: left;
}

.Input-alignCenter {
  text-align: center;
}

.Input-autoSize {
  flex: initial;
  width: auto;
}

.Backdrop {
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  @mixin focus-ring base, 1px;
  position: absolute;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-backdrop);
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: var(--p-color-input-bg-surface);
  border: var(--p-border-width-0165) solid var(--p-color-input-border);
  /* stylelint-disable-next-line -- hard coded to address accessbility issue https://github.com/Shopify/polaris/issues/7838 */
  border-top-color: #898f94;
  border-radius: var(--p-border-radius-200);
  pointer-events: none;
}

.Prefix,
.Suffix {
  position: relative;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  flex: 0 0 auto;
  color: var(--p-color-text-secondary);
  user-select: none;
}

.Prefix {
  margin-left: var(--p-space-300);
  margin-right: var(--p-space-150);
}

.PrefixIcon {
  margin-left: var(--p-space-200);
  margin-right: var(--p-space-100);
}

.Suffix {
  margin-left: var(--p-space-100);
  margin-right: var(--p-space-300);
}

.VerticalContent {
  position: relative;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  color: var(--p-color-text-secondary);
  padding: var(--p-space-200) var(--p-space-200) 0 var(--p-space-200);
  max-height: 140px;
  overflow: auto;
  border: var(--p-border-width-025) solid transparent;
  width: 100%;

  > .Input {
    padding-left: 0;
    padding-right: 0;
  }

  @media (--p-breakpoints-sm-up) {
    max-height: 328px;
  }
}

.Loading {
  /* stylelint-disable-next-line -- Needed to render the spinner above the Backdrop */
  z-index: var(--pc-text-field-contents);
  margin-right: var(--p-space-300);

  svg {
    display: block;
  }
}

.CharacterCount {
  color: var(--p-color-text-secondary);
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  margin: 0 var(--p-space-300) 0 var(--p-space-100);
  pointer-events: none;
  text-align: right;
}

.AlignFieldBottom {
  align-self: flex-end;
  width: 100%;
  padding-bottom: var(--p-space-200);
}

.ClearButton {
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  @mixin focus-ring base, 0, base;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  @mixin unstyled-button;
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  margin: 0 var(--p-space-300) 0 var(--p-space-100);
  transition: visibility var(--p-motion-duration-200)
      var(--p-motion-ease-in-out),
    opacity var(--p-motion-duration-200) var(--p-motion-ease-in-out);

  &:focus-visible:enabled {
    /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
    @mixin focus-ring base, 0, focused;
  }

  &:disabled {
    cursor: default;
  }
}

.Spinner {
  /* stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY */
  z-index: var(--pc-text-field-contents);
  margin: var(--p-space-100);
  color: var(--p-color-icon);
  display: flex;
  visibility: hidden;
  align-self: stretch;
  flex-direction: column;
  width: 22px;
  cursor: pointer;

  justify-content: center;

  .focus &,
  .TextField:hover & {
    visibility: visible;
  }
}

.SpinnerIcon {
  position: absolute;

  /* Safari: prevent highlighting icon */
  user-select: none;

  svg {
    fill: var(--p-color-icon);
  }
}

.Resizer {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 0;
  visibility: hidden;
  overflow: hidden;
}

.DummyInput {
  /* stylelint-disable-next-line -- polaris-migrator DO NOT COPY */
  @mixin text-style-input;
  /* stylelint-disable-next-line -- polaris custom global property */
  padding: var(--pg-control-vertical-padding) var(--p-space-300);

  /* We need the following properties in order to have long, unbroken
     strings wrap in the same way they do in textareas. */
  /* stylelint-disable-next-line -- polaris-migrator DO NOT COPY */
  @mixin text-breakword;
  white-space: pre-wrap;
}

.Segment {
  background: var(--p-color-bg-fill-tertiary);
  border-radius: var(--p-border-radius-100);
  display: flex;
  flex: 1 1 0%;
  justify-content: center;
  align-items: center;
  appearance: none;
  border: none;

  &:hover {
    background: var(--p-color-bg-fill-tertiary-hover);
  }

  &:focus {
    outline: none;
  }

  &:active {
    background: var(--p-color-bg-fill-tertiary-active);
  }

  &:first-child {
    margin-bottom: 0;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  &:last-child {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  &:not(:first-child) {
    margin-top: 0;
  }
}

.monospaced {
  font-family: var(--p-font-family-mono);
}
