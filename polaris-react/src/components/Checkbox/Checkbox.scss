@import '../../styles/common';

.Checkbox {
  position: relative;
  margin: var(--p-space-025);
}

.ChoiceLabel .Backdrop {
  border-width: 0;
  box-shadow: inset 0 0 0 var(--p-border-width-0165) var(--p-color-input-border);
  transition: border-color var(--p-motion-duration-100) var(--p-motion-ease-out),
    border-width var(--p-motion-duration-100) var(--p-motion-ease-out),
    box-shadow var(--p-motion-duration-100) var(--p-motion-ease-out);

  // This fixes artifacts caused by box-shadow in some browsers
  transform: translate3d(0, 0, 0);
}

.ChoiceLabel:hover .Backdrop {
  border-color: var(--p-color-input-border-hover);
  box-shadow: inset 0 0 0 var(--p-border-width-0165)
    var(--p-color-input-border-hover);
  background-color: var(--p-color-input-bg-surface-hover);
}

.ChoiceLabel:active .Backdrop,
.ChoiceLabel:checked .Backdrop {
  border-color: var(--p-color-bg-fill-brand);
  border-width: 0;
  box-shadow: inset 0 0 0 var(--p-space-050) var(--p-color-bg-fill-brand);
}

// stylelint-disable selector-max-specificity, selector-max-class, selector-max-combinators, max-nesting-depth -- Much easier to read the rules when written like this
.Input {
  // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
  @include visually-hidden;

  &:focus-visible {
    + .Backdrop {
      // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
      @include focus-ring($style: 'focused');
      outline: var(--p-border-width-050) solid var(--p-color-border-focus);
      outline-offset: var(--p-space-025);
      background-color: var(--p-color-input-bg-surface-hover);
      border-width: 0;
    }
  }

  &:checked,
  &.Input-indeterminate {
    + .Backdrop {
      // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
      @include control-backdrop(active);
      border-color: var(--p-color-bg-fill-brand);
      background-color: var(--p-color-bg-fill-brand-selected);
      box-shadow: inset 0 0 0 var(--p-space-800)
        var(--p-color-bg-fill-brand-selected);
    }

    ~ .Icon {
      transition: opacity var(--p-motion-duration-150) var(--p-motion-ease-out),
        transform var(--p-motion-duration-150) var(--p-motion-ease-out);
      opacity: 1;

      svg {
        fill: var(--p-color-text-brand-on-bg-fill);
      }

      &.animated {
        transition: initial;
      }
    }
  }

  &:disabled {
    + .Backdrop {
      // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
      @include control-backdrop(disabled);
      // We set the border-color to transparent here
      // in order for the background color to bleed all the way to the edge of the element.
      border-color: transparent;
      background-color: var(--p-color-checkbox-bg-surface-disabled);
      box-shadow: none;

      &::before {
        background-color: transparent;
      }
    }

    ~ .Icon svg {
      color: var(--p-color-checkbox-icon-disabled);
    }
  }

  &:disabled:checked,
  &:disabled.Input-indeterminate {
    + .Backdrop {
      background-color: var(--p-color-checkbox-bg-surface-disabled);

      &::before {
        background-color: transparent;
      }
    }
  }

  &.toneMagic {
    + .Backdrop {
      background-color: var(--p-color-bg-surface-magic);
      box-shadow: inset 0 0 0 var(--p-border-width-0165)
        var(--p-color-border-magic-secondary);

      .ChoiceLabel:hover & {
        background-color: var(--p-color-bg-surface-magic-hover);
        box-shadow: inset 0 0 0 var(--p-border-width-0165)
          var(--p-color-border-magic-secondary-hover);
      }
    }

    &:checked,
    &.Input-indeterminate {
      + .Backdrop {
        border-color: var(--p-color-bg-fill-magic);
        background-color: var(--p-color-bg-fill-magic);
        box-shadow: inset 0 0 0 var(--p-space-800) var(--p-color-bg-fill-magic);

        .ChoiceLabel:hover & {
          border-color: var(--p-color-bg-fill-magic);
          background-color: var(--p-color-bg-fill-magic);
          box-shadow: inset 0 0 0 var(--p-space-800)
            var(--p-color-bg-fill-magic);
        }
      }
    }
  }
  // stylelint-enable selector-max-specificity, selector-max-class, selector-max-combinators, max-nesting-depth
}

.Backdrop {
  // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
  @include control-backdrop;
  position: relative;
  display: block;
  width: 100%;
  height: 100%;

  border: var(--p-border-width-0165) solid var(--p-color-input-border);

  &:hover {
    border-color: var(--p-color-input-border-hover);
  }
}

.Icon {
  position: absolute;
  transform-origin: 50% 50%;
  pointer-events: none;
  opacity: 0;
  transition: opacity var(--p-motion-duration-100) var(--p-motion-ease-out),
    transform var(--p-motion-duration-100) var(--p-motion-ease-out);

  top: calc(-1 * var(--p-space-050));
  left: calc(-1 * var(--p-space-050));
  bottom: calc(-1 * var(--p-space-050));
  right: calc(-1 * var(--p-space-050));

  &.animated {
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    margin: var(--p-space-050);
    transition: initial;
  }

  svg {
    color: var(--p-color-text-brand-on-bg-fill);

    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }

  @media (-ms-high-contrast: active) {
    fill: windowText;
  }
}

// stylelint-disable selector-max-specificity, selector-max-class, selector-max-combinators, selector-max-compound-selectors -- generated by polaris-migrator DO NOT COPY
.error {
  .Icon svg {
    color: var(--p-color-text-critical-on-bg-fill);
  }

  .Input {
    + .Backdrop {
      // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
      @include control-backdrop(error);
      background-color: var(--p-color-bg-surface-critical);
      box-shadow: inset 0 0 0 var(--p-border-width-0165)
        var(--p-color-bg-fill-critical-active);
    }
  }

  .Backdrop {
    &:active {
      box-shadow: inset 0 0 0 var(--p-space-050)
        var(--p-color-bg-fill-critical-active);
    }
  }

  .Input:checked,
  .Input.Input-indeterminate {
    + .Backdrop {
      background-color: var(--p-color-bg-fill-critical-selected);
      box-shadow: inset 0 0 0 var(--p-space-300)
        var(--p-color-bg-fill-critical-selected);
    }
  }

  .Input:active {
    + .Backdrop {
      background-color: var(--p-color-border-critical);
      box-shadow: inset 0 0 0 var(--p-space-050)
        var(--p-color-bg-fill-critical-active);
    }
  }

  .Input:focus-visible + .Backdrop {
    &,
    .ChoiceLabel:hover & {
      border-color: var(--p-color-border-critical-secondary);
      background-color: var(--p-color-bg-surface-critical);
    }
  }
}
// stylelint-enable selector-max-specificity, selector-max-class, selector-max-combinators

// stylelint-disable-next-line selector-max-combinators, selector-max-type -- override
.animated svg > path {
  stroke-dasharray: 2;
  stroke-dashoffset: 2;

  // stylelint-disable-next-line selector-max-combinators, selector-max-type, selector-no-qualifying-type -- override
  &.checked {
    animation-name: pathAnimation;
    animation-duration: var(--p-motion-duration-150);
    animation-fill-mode: forwards;
    // stylelint-disable-next-line declaration-property-value-disallowed-list -- override
    animation-timing-function: linear;
    animation-direction: normal;
    animation-iteration-count: 1;
    opacity: 1;
  }
}

// stylelint-disable-next-line polaris/motion/at-rule-disallowed-list -- override
@keyframes pathAnimation {
  from {
    stroke-dashoffset: 2;
  }

  to {
    stroke-dashoffset: 0;
  }
}
