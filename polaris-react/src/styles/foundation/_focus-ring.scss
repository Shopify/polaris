/// Sets the focus ring for an interactive element
/// @param {String} $size - The size of the border radius on the focus ring.
/// @param {String} $style - Focus ring state.
/// @param {Number} $border-width - Optional negative offset (can be used to ensure the outline wraps the border).
/// @param {Number} $delay - The transition delay in milliseconds.
///

@mixin focus-ring($size: 'base', $border-width: 0, $style: 'base') {
  $stroke: 2px;
  // calc does not like performing addition with a unitless number (`0`, NOT `0px`) This makes sure that we can handle unitless zeros by not trying to do math with them.
  $offset: if($border-width == 0, 1px, calc(#{$border-width} + 1px));
  $border-radius: if(
    $size == 'wide',
    var(--p-border-radius-2),
    var(--p-border-radius-1)
  );
  $negative-offset: calc(-1 * #{$offset});

  @if $style == 'base' {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      z-index: 1;
      top: $negative-offset;
      right: $negative-offset;
      bottom: $negative-offset;
      left: $negative-offset;
      display: block;
      pointer-events: none;
      box-shadow: 0 0 0 $negative-offset var(--p-focused);
      transition: box-shadow var(--p-duration-100) var(--p-ease);
      border-radius: calc(#{$border-radius} + 1px);
      @content;
    }
  } @else if $style == 'focused' {
    &::after {
      box-shadow: 0 0 0 $stroke var(--p-focused);
      outline: var(--p-border-width-1) solid transparent;
      @content;
    }
  }
}

@mixin no-focus-ring {
  &::after {
    content: none;
  }
}
