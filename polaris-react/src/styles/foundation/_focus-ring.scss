/// Sets the focus ring for an interactive element
/// @param {String} $size - The size of the border radius on the focus ring.
/// @param {String} $style - Focus ring state.
/// @param {Number} $border-width - Optional negative offset (can be used to ensure the outline wraps the border).
///

@mixin focus-ring($size: 'base', $border-width: 0, $style: 'base') {
  $stroke: 2px;
  // calc does not like performing addition with a unitless number (`0`, NOT `0px`) This makes sure that we can handle unitless zeros by not trying to do math with them.
  @if $border-width == 0 {
    --pc-focus-ring-offset: -1px;
  } @else {
    --pc-focus-ring-offset: calc(-1 * calc($(border-width) + 1px));
  }

  @if $style == 'base' {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY
      z-index: 1;
      top: var(--pc-focus-ring-offset);
      right: var(--pc-focus-ring-offset);
      bottom: var(--pc-focus-ring-offset);
      left: var(--pc-focus-ring-offset);
      display: block;
      pointer-events: none;
      box-shadow: 0 0 0 var(--pc-focus-ring-offset) var(--p-color-border-focus);
      @if $size == 'wide' {
        border-radius: var(--p-border-radius-200);
      } @else {
        border-radius: var(--p-border-radius-100);
      }
    }
  } @else {
    @if $style == 'focused' {
      &::after {
        box-shadow: 0 0 0 $stroke var(--p-color-border-focus);
        outline: var(--p-border-width-025) solid transparent;
      }
    }
  }
}

@mixin no-focus-ring {
  &::after {
    content: none;
  }
}
